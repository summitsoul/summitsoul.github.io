{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"past/","title":"\u79fb\u690d","text":"<p>\u5c06\u9ad8\u4e2d\u65f6\u671f\u5199\u7684\u4e00\u4e9b\u6a21\u677f\u4ee5\u53ca\u9898\u89e3\u7ed9\u79fb\u690d\u8fc7\u6765\u4e00\u4efd</p>"},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/","title":"\u672c\u9898\u89e3\u9762\u5411\u5bf9\u8c61\u4e3a\u50cf\u6211\u4e00\u6837\u7684\u849f\u84bb\uff0c\u53ea\u6d89\u53ca\u5230\u6c42\u6700\u5927\u76c8\u5229\u503c\uff0c\u4e0d\u6d89\u53ca\u5230\u8f93\u51fa\u5206\u591a\u5c11\u53f0\uff0c\u8bf7\u5df2\u7ecf\u4f1a\u7b2c\u4e00\u95ee\u7684\u5de8\u4f6c\u4eec\u79fb\u4f4d(\uff40\u30fb\u03c9\u30fb\u00b4)","text":""},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_2","title":"\u9898\u76ee","text":""},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_3","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u603b\u516c\u53f8\u62e5\u6709\u9ad8\u6548\u8bbe\u5907M\u53f0\uff0c\u51c6\u5907\u5206\u7ed9\u4e0b\u5c5e\u7684N\u4e2a\u5206\u516c\u53f8\u3002\u5404\u5206\u516c\u53f8\u82e5\u83b7\u5f97\u8fd9\u4e9b\u8bbe\u5907\uff0c\u53ef\u4ee5\u4e3a\u56fd\u5bb6\u63d0\u4f9b\u4e00\u5b9a\u7684\u76c8\u5229\u3002\u95ee\uff1a\u5982\u4f55\u5206\u914d\u8fd9M\u53f0\u8bbe\u5907\u624d\u80fd\u4f7f\u56fd\u5bb6\u5f97\u5230\u7684\u76c8\u5229\u6700\u5927\uff1f\u6c42\u51fa\u6700\u5927\u76c8\u5229\u503c\u3002\u5176\u4e2dM\u226415\uff0cN\u226410\u3002\u5206\u914d\u539f\u5219\uff1a\u6bcf\u4e2a\u516c\u53f8\u6709\u6743\u83b7\u5f97\u4efb\u610f\u6570\u76ee\u7684\u8bbe\u5907\uff0c\u4f46\u603b\u53f0\u6570\u4e0d\u8d85\u8fc7\u8bbe\u5907\u6570M\u3002</p>"},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_4","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6570\uff0c\u7b2c\u4e00\u4e2a\u6570\u662f\u5206\u516c\u53f8\u6570N\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u8bbe\u5907\u53f0\u6570M\u3002 \u63a5\u4e0b\u6765\u662f\u4e00\u4e2aN*M\u7684\u77e9\u9635\uff0c\u8868\u660e\u4e86\u7b2c I\u4e2a\u516c\u53f8\u5206\u914d J\u53f0\u673a\u5668\u7684\u76c8\u5229\u3002</p>"},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_5","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u7b2c1\u884c\u4e3a\u6700\u5927\u76c8\u5229\u503c \u7b2c2\u5230\u7b2cn\u4e3a\u7b2ci\u5206\u516c\u53f8\u5206x\u53f0 P.S.\u8981\u6c42\u7b54\u6848\u7684\u5b57\u5178\u5e8f\u6700\u5c0f</p>"},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_6","title":"\u89e3\u7b54","text":""},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_7","title":"\u601d\u8def","text":"<p>\u7531\u4e8e\u672c\u849f\u84bb\u53ea\u60f3\u7b80\u5355\u7684\u5237\u4e00\u5237\u9898\uff0c\u7ec3\u4e00\u7ec3dp\u7684\u601d\u60f3\uff0c\u6240\u4ee5\u53ea\u505a\u4e86\u7b2c\u4e00\u95ee\uff0c\u7b2c\u4e8c\u95ee\u4e0d\u5728\u6211\u7ec3\u4e60\u7684\u8303\u56f4\u5185\uff08\u5176\u5b9e\u662f\u4e0d\u4f1a\uff09\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u627e\u5230\u8f6c\u79fb\u6240\u7528\u7684\u72b6\u6001\u662f\u4ec0\u4e48\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u7528$f[i][j]$\u6765\u8868\u793a\u524d$i$\u4e2a\u516c\u53f8\u4e00\u5171\u5206\u914d$j$\u53f0\u673a\u5668\u6240\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\uff0c\u6240\u4ee5\u6211\u4eec\u5728$0~{}j$\u8fd9\u4e2a\u533a\u95f4\u5185\u679a\u4e3e$k$\u8fd9\u4e2a\u503c\uff0c\u901a\u8fc7$i - 1$\u4e2a\u516c\u53f8\u7528$j - k$\u4e2a\u673a\u5668\u65f6\u7684\u603b\u5171\u6536\u5165\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b$f[i][j] = max(f[i][j], f[i - 1][j - k] + map[i][k])$\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002</p>"},{"location":"past/dp/2066%E6%9C%BA%E5%99%A8%E5%88%86%E9%85%8D/#_8","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nint n, m;\nint f[15][20], map[15][20];\nint main(){\n    scanf(\"%d %d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i++)\n        for(int j = 1; j &lt;= m; j++)\n            scanf(\"%d\", &amp;map[i][j]);\n    for(int i = 1; i &lt;= n; i++)\n        for(int j = 0; j &lt;= m; j++) //\u6ce8\u610f\u6211\u4eec\u4ece0\u5f00\u59cb\u5faa\u73af\u673a\u5668\u6570\u53ef\u4ee5\u4e3a0 \n            for(int k = 0; k &lt;= j; k++)\n                f[i][j] = max(f[i][j], f[i - 1][j - k] + map[i][k]);\n    printf(\"%d\\n\", f[n][m]);\n    return 0;\n}\n</code></pre> <p>\u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/graph/1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/","title":"\u9898\u9762","text":""},{"location":"past/graph/1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>A \u56fd\u6709n\u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece 1 \u5230 n\uff0c\u57ce\u5e02\u4e4b\u95f4\u6709 m \u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002 \u73b0\u5728\u6709 q \u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\u7269\uff0c \u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\u3002</p>"},{"location":"past/graph/1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 n,m\uff0c\u8868\u793a A \u56fd\u6709 n \u5ea7\u57ce\u5e02\u548c m \u6761\u9053\u8def\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 x, y, z\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4ece x \u53f7\u57ce\u5e02\u5230 y \u53f7\u57ce\u5e02\u6709\u4e00\u6761\u9650\u91cd\u4e3a z \u7684\u9053\u8def\u3002 \u6ce8\u610f\uff1a\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u6761\u9053\u8def \u3002\u63a5\u4e0b\u6765\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570 q\uff0c\u8868\u793a\u6709 q \u8f86\u8d27\u8f66\u9700\u8981\u8fd0\u8d27\u3002 \u63a5\u4e0b\u6765 q \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 x,y\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4e00\u8f86\u8d27\u8f66\u9700\u8981\u4ece x \u57ce\u5e02\u8fd0\u8f93\u8d27\u7269\u5230 y \u57ce\u5e02\uff0c\u4fdd\u8bc1 $$x \\neq y$$</p>"},{"location":"past/graph/1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5171\u6709 q \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u4e8e\u6bcf\u4e00\u8f86\u8d27\u8f66\uff0c\u5b83\u7684\u6700\u5927\u8f7d\u91cd\u662f\u591a\u5c11\u3002 \u5982\u679c\u8d27\u8f66\u4e0d\u80fd\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u8f93\u51fa -1\u3002  </p>"},{"location":"past/graph/1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/#_5","title":"\u60f3\u6cd5","text":"<p>\u4eca\u5929\u4e0a\u5348\u82b1\u4e86\u4e24\u4e2a\u591a\u5c0f\u65f6\u641e\u51fa\u6765\u7684\u4e00\u9053\u9898\uff0c\u672c\u6765\u6700\u5f00\u59cb\u60f3\u7206\u641c + \u8d2a\u5fc3\u6765\u505aFloyd\uff08\u66b4\u529b\u5927\u6cd5\u597d\uff09\uff0c\u7ed3\u679c\u53d1\u73b0\u53ea\u6709\u53ef\u601c\u768430\u5206\uff08QAQ\uff09\uff0c\u65e0\u5948\u53ea\u5f97\u597d\u597d\u770b\u9898\u5206\u6790\u3002\u9898\u4e2d\u8bf4\u5230\uff0c\u8981\u6c42\u7684\u662f\u6bcf\u8f86\u8d27\u8f66\u7684\u6700\u5927\u8f7d\u91cd\u91cf\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u662f\u4e0d\u4f1a\u9009\u62e9\u53ef\u4ee5\u5230\u8fbe\u76f8\u540c\u5730\u70b9\u8fb9\u6743\u5c0f\u7684\u8def\u5f84\u7684\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u8fb9\u5220\u53bb\uff08\u8bf6\u6709\u70b9\u50cf\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u6211\u4eec\u8981\u6c42\u7684\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u800c\u662f\u6700\u5927\u751f\u6210\u6811\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u5728\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c\u4e86\uff08\u53c8\u662f\u4e00\u9053\u6811\u8bba\u9898\uffe3\u3078\uffe3\uff09\uff0c\u90a3\u4e48\u65e2\u7136\u662f\u6811\u4e86\uff0c\u5728\u4e00\u4e2a\u6811\u4e4b\u95f4\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u6761\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\u6743\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4ec0\u4e48\uff0c\u5bf9\uff0c\u7206\u641c\uff08\u5212\u53bb\uff09\uff0c\u54b3LCA\uff0c\u5728LCA\u7684\u540c\u65f6\u4e5f\u8981\u6ce8\u610f\u7ef4\u62a4\u6700\u5c0f\u8fb9\u6743\u3002\u6211\u4eec\u6765\u603b\u7ed3\u4e00\u4e0b\uff0c\u9996\u5148\u8981\u5efa\u56fe\uff0c\u751f\u6210\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u8fdb\u884cLCA\u6c42\u5f97\u6700\u5c0f\u8fb9\u6743\u3002</p> \u4ee3\u7801 <pre><code>\n#include\n#include\n#include\n#define INF 0x3f3f3f\nusing namespace std;\nint n, m, q, cnt = 0;\nbool vis[50010];\nint fu[50010][22], w[50010][22];\nint fa[10010], head[10010], depth[10010];\nstruct edge1{\n    int u, v, w;\n}e1[50010];\nstruct edge2{\n    int w, to, next;\n}e2[50010 &lt;&lt; 1];\ninline int read(){\n    int s = 0;\n    char ch = getchar();\n    while(ch &lt; '0' || ch &gt; '9') ch = getchar();\n    while(ch &gt;= '0' &amp;&amp; ch &lt;= '9'){s = s * 10 + ch - '0'; ch = getchar();}\n    return s;\n}\nbool cmp(edge1 a, edge1 b){return a.w &gt; b.w;}\nint find(int x){\n    if(x != fa[x]) fa[x] = find(fa[x]);\n    return fa[x];\n}\nvoid add(int u, int v, int w){\n    e2[++cnt].next = head[u];\n    e2[cnt].to = v;\n    e2[cnt].w = w;\n    head[u] = cnt;\n}\nvoid kruskal(){\n    sort(e1 + 1, e1 + m + 1, cmp);\n    for(int i = 1; i &lt;= n; i++) fa[i] = i;\n    for(int i = 1; i &lt;= m; i++)\n        if(find(e1[i].u) != find(e1[i].v)){\n            fa[find(e1[i].u)] = find(e1[i].v);\n            add(e1[i].u, e1[i].v, e1[i].w);\n            add(e1[i].v, e1[i].u, e1[i].w);\n        }\n}\nvoid dfs(int now){\n    vis[now] = true;\n    for(int i = head[now]; i; i = e2[i].next){\n        int to = e2[i].to;\n        if(vis[to]) continue;\n        depth[to] = depth[now] + 1;\n        w[to][0]  = e2[i].w;\n        fu[to][0] = now;\n        dfs(to);\n    }\n}\nint LCA(int u, int v){\n    if(find(u) != find(v)) return -1;\n    int ans = INF;\n    if(depth[u] &gt; depth[v]) swap(u, v);\n    for(int i = 20; i &gt;= 0; i--)\n        if(depth[fu[v][i]] &gt;= depth[u]){\n            ans = min(ans, w[v][i]);\n            v = fu[v][i];\n        }\n    if(u == v) return ans;\n    for(int i = 20; i &gt;= 0; i--)\n        if(fu[u][i] != fu[v][i]){\n            ans = min(ans, min(w[u][i], w[v][i]));\n            u = fu[u][i];\n            v = fu[v][i];\n        }\n    ans = min(ans, min(w[u][0], w[v][0]));\n    return ans;\n}\nint main(){\n    n = read(); m = read();\n    for(int i = 1; i &lt;= m; i++){\n        int x, y, z; \n        x = read(); y = read(); z = read();\n        e1[i].u = x; e1[i].v = y; e1[i].w = z;\n    }\n    kruskal();\n    for(int i = 1; i &lt;= n; i++)\n        if(!vis[i]){\n            depth[i] = 1;\n            dfs(i);\n            fu[i][0] = i;\n            w[i][0] = INF;\n        }\n    for(int i = 1; i &lt;= 20; i++)\n        for(int j = 1; j &lt;= n; j++){\n            fu[j][i] = fu[fu[j][i - 1]][i - 1];\n            w[j][i] = min(w[j][i - 1], w[fu[j][i - 1]][i - 1]);\n        }\n    q = read();\n    for(int i = 1; i &lt;= q; i++){\n        int u, v; u = read(); v = read();\n        printf(\"%d\\n\", LCA(u, v));\n    }\n    return 0;\n}"},{"location":"past/graph/Dijkstra/","title":"\u6700\u77ed\u8def\u95ee\u9898$\uff081\uff09$","text":""},{"location":"past/graph/Dijkstra/#_1","title":"\u95f2\u626f","text":""},{"location":"past/graph/Dijkstra/#_2","title":"\u539f\u56e0","text":"<p>\u672c\u849f\u84bb\u8bb0\u6027\u4e0d\u592a\u597d\u6015\u5fd8\uff08\u4e00\u6837\u7684\u8bf4\u8f9e\u30fd(\u30fc_\u30fc)\u30ce\uff09\uff0c\u54b3\uff0c\u5199\u8fd9\u7bc7\u6700\u77ed\u8def\u7684\u6587\u7ae0\u6765\u624e\u5b9e\u81ea\u5df1\u7684\u57fa\u7840\uff08\u540c\u65f6\u8ba9\u81ea\u5df1\u641e\u7684\u66f4\u660e\u767d\u70b9\uff09\u3002</p>"},{"location":"past/graph/Dijkstra/#_3","title":"\u80cc\u666f","text":"<p>\u5728\u505a\u56fe\u8bba\u9898\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5f80\u5f80\u4f1a\u901a\u8fc7\u6700\u77ed\u8def\u6765\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5728\u8fd9\u7bc7\u548c\u4e0b\u7bc7\u6587\u7ae0\u91cc\u6211\u5c06\u4f1a\u4ecb\u7ecd$Dijkstra$\u548c$SPFA$\u4e24\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u6700\u77ed\u8def\u95ee\u9898\u3002</p>"},{"location":"past/graph/Dijkstra/#dijkstra","title":"$Dijkstra$","text":""},{"location":"past/graph/Dijkstra/#_4","title":"\u80cc\u666f","text":"<p>$Dijkstra$\u53ef\u4ee5\u8bf4\u662f\u6700\u7ecf\u5178\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u4e4b\u4e00\u4e86\uff0c\u4e5f\u662f\u6211\u4eec\u5728\u8fdb\u884c\u7b97\u6cd5\u6bd4\u8d5b\u65f6\u5728\u65e0\u8d1f\u8fb9\u6743\u56fe\u65f6\u9996\u9009\u7684\u7b97\u6cd5\uff08$SPFA$\u5df2\u5e9f\uff0c$Dijstra$\u5f53\u7acb\uff08\u5212\u53bb\uff09\uff09\u3002\u8fd9\u79cd\u7b97\u6cd5\u662f\u7531\u8377\u5170\u8ba1\u7b97\u673a\u5927\u795e$Edsger Wybe Dijkstra$\u521b\u9020\u7684\u65b9\u6cd5\uff0c\u4e5f\u4ee5\u4ed6\u7684\u540d\u5b57\u547d\u540d\u3002</p>"},{"location":"past/graph/Dijkstra/#_5","title":"\u5206\u6790","text":"<p>$Dijkstra$\u7684\u601d\u8def\u662f\uff1a\u8bbe\u7f6e\u5b9a\u70b9\u96c6\u5408$S$\uff0c\u9996\u5148\u5c06\u8d77\u59cb\u70b9\u52a0\u5165\u8be5\u96c6\u5408\uff0c\u7136\u540e\u6839\u636e\u8d77\u59cb\u70b9\u5230\u5176\u4ed6\u5b9a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u9009\u62e9\u957f\u5ea6\u6700\u5c0f\u7684\u5b9a\u70b9\u52a0\u5165\u96c6\u5408\uff0c\u6839\u636e\u6240\u52a0\u5165\u5b9a\u70b9\u66f4\u65b0\u8fdc\u70b9\u5230\u5176\u4ed6\u5b9a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u7136\u540e\u518d\u9009\u53d6\u6700\u5c0f\u53d8\u7684\u5b9a\u70b9\u3002\u4e00\u6b21\u6765\u505a\uff0c\u77e5\u9053\u6c42\u89e3\u51fa\u5230\u8fbe\u6240\u6709\u5b9a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u7136\u540e\u518d\u9009\u53d6\u6700\u5c0f\u8fb9\u7684\u5b9a\u70b9\u3002\u4e00\u6b21\u6765\u505a\uff0c\u77e5\u9053\u6c42\u89e3\u51fa\u5230\u8fbe\u6240\u6709\u5b9a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u3002\uff08\u767e\u5ea6\u7ed9\u7684\u89e3\u91ca\u771f\u662f\u7b80\u6d01\u6666\u6da9(^_\u2212)\u2606\uff09\u3002\u6211\u662f\u8fd9\u6837\u7406\u89e3\u7684\uff0c\u8fd9\u65f6\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\u6765\u505a\u7684\uff0c\u9996\u5148\u6211\u4eec\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u5c06\u6240\u6709\u7684\u8def\u5f84\u6743\u91cd$dis[N]$\u90fd\u8bbe\u4e3a$Max$\uff0c\u6211\u4eec\u627e\u5230\u6211\u4eec\u7684\u8d77\u70b9$u$\uff0c\u5c06\u5176\u8868\u8bb0\u8d77\u6765\uff0c\u5c06\u8d77\u70b9\u7684\u8def\u5f84\u6743\u91cd\u8bbe\u4e3a$0$\uff0c\u7136\u540e\u5c06\u5b83\u6240\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\u5c06\u4ed6\u4eec\u7684\u8def\u5f84\u6743\u91cd\u8bbe\u4e3a$dis[v] = w[u,v]$\uff0c\u7136\u540e\u6211\u4eec\u5c06$dis$\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u70b9\u6dfb\u52a0\u5230\u4e00\u4e2a\u96c6\u5408\u5f53\u4e2d\uff0c\u8fd9\u4e2a\u9876\u70b9\u5c31\u4e0d\u518d\u9700\u8981\u66f4\u65b0\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u89c2\u5bdf\u65b0\u52a0\u5165\u7684\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u9876\u70b9\uff0c\u5e76\u4e14\u901a\u8fc7\u8fd9\u4e2a\u9876\u70b9\u5230\u8fbe\u662f\u5426\u8ddd\u79bb\u6bd4\u8d77\u70b9\u5f00\u59cb\u8ddd\u79bb\u8981\u8fd1\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u518d\u5c06\u8fd9\u4e2a\u9876\u70b9\u6dfb\u52a0\u5165\u4e4b\u524d\u7684\u96c6\u5408\u5f53\u4e2d\uff0c\u63a5\u4e0b\u6765\u5c31\u5728\u6b64\u91cd\u590d\u4e0a\u8ff0\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u6211\u4eec\u5f80\u91cc\u9762\u6dfb\u52a0\u9876\u70b9\u7684\u6570\u7ec4\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002</p>"},{"location":"past/graph/Dijkstra/#_6","title":"\u5177\u4f53\u4f8b\u5b50","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u66f4\u597d\u7684\u7406\u89e3$Dijkstra$\u7b97\u6cd5\u3002\u6211\u4eec\u6765\u770b\u8fd9\u6837\u7684\u4e00\u4e2a\u573a\u666f\u3002  \u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u4ece\u70b9$1$\u5230\u70b9$6$\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u7528\u4e4b\u524d\u63d0\u5230\u7684\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u56fe\uff0c\u4e0d\u4e86\u89e3\u7684\u53ef\u4ee5\u770b\u770b\u94fe\u5f0f\u524d\u5411\u661f\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u627e\u5230\u8d77\u70b9$1$\u5e76\u5c06$1$\u70b9\u7684\u8ddd\u79bb\u8bbe\u4e3a$0$\uff0c\u5e76\u6807\u8bb0\u4e0a\u5df2\u8bbf\u95ee\u3002\u7136\u540e\u627e\u51fa\u5b83\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u7684\u9876\u70b9$2$\u548c$3$\uff0c\u5e76\u66f4\u65b0\u4ed6\u4eec\u7684\u8ddd\u79bb\u3002  \u8fd9\u65f6\u6211\u4eec\u770b\u5230\u5230$3$\u7684\u8ddd\u79bb\u6700\u5c0f\u662f$3$\u90a3\u4e48\u6211\u4eec\u4fbf\u5c06$3$\u8fd9\u4e2a\u70b9\u6807\u8bb0\u4e0a\u3002  \u8fd9\u65f6\u6211\u4eec\u518d\u4ece\u70b9$3$\u51fa\u53d1\uff0c\u53d1\u73b0\u4ed6\u53ef\u4ee5\u5230\u8fbe$2\u30014\u30015$\u4e09\u4e2a\u70b9\uff0c\u66f4\u65b0\u4ed6\u4eec\u3002  \u6211\u4eec\u770b\u5230\u4ece\u70b9$3$\u5230\u70b9$2$\u6bd4\u4ece\u70b9$1$\u5230\u70b9$2$\u7684\u8ddd\u79bb\u8fd8\u8981\u77ed\uff0c\u6240\u4ee5\u6211\u4eec\u51b3\u5b9a\u4ece$1$\u5230$3$\u5230$2$\uff0c\u6807\u8bb0\u4e0a\u70b9$2$\u3002  \u8fd9\u65f6\u6211\u4eec\u518d\u4ece$2$\u70b9\u51fa\u53d1\uff0c\u4e0e\u70b9$2$\u76f8\u8fde\u63a5\u7684\u4e3a4\u70b9\uff0c\u6211\u4eec\u53d1\u73b0\u4ece$2$\u5230$4$\u6bd4\u539f\u6765\u7684\u8ddd\u79bb\u8981\u8fdc\uff0c\u6240\u4ee5\u66f4\u65b0\u5e76\u6807\u8bb0\u70b9$4$\u3002  \u7136\u540e\u518d\u66f4\u65b0\u4e0e\u70b9$4$\u8fde\u63a5\u7684\u70b9$5$\u548c\u70b9$6$\u3002  \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u70b9$5$\u65e0\u6cd5\u518d\u66f4\u65b0\u4e86\uff0c\u8bb0\u5f55\u4e0b\u70b9$5$\u3002  \u7136\u540e\u5230\u8fbe\u70b9$6$\uff0c\u5e76\u6807\u8bb0\u3002  \u8fd9\u65f6\u6211\u4eec\u53d1\u73b0\u6240\u6709\u7684\u70b9\u5df2\u7ecf\u90fd\u88ab\u6807\u8bb0\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u5230\u7684\u6700\u77ed\u8def\u3002</p>"},{"location":"past/graph/Dijkstra/#_7","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\n#define INF 0x3f3f3f\nusing namespace std;\nconst int maxn = 1e5 + 10;\nint n, m, cnt = 0;\nint head[maxn], dis[maxn], vis[maxn];\nstruct edge{\n    int to, next, w;\n}e[maxn];\nvoid add(int u, int v, int w){\n    e[++cnt].next = head[u];\n    e[cnt].to = v;\n    e[cnt].w = w;\n    head[u] = cnt;\n}\nvoid Dijkstra(){\n    dis[1] = 0;\n    for(int i = 1; i &lt; n; i++){\n        int minn = INF, now;\n        for(int j = 1; j &lt;= n; j++)\n            if(!vis[j] &amp;&amp; dis[j] &lt; minn){\n                minn = dis[j];\n                now = j;\n            }\n        vis[now] = true;\n        for(int j = head[now]; j; j = e[j].next){\n            int to = e[j].to;\n            if(!vis[to]) dis[to] = min(dis[to], dis[now] + e[j].w);\n        }\n    }\n} \nint main(){\n    memset(dis, INF, sizeof(dis));\n    memset(vis, false, sizeof(vis));\n    scanf(\"%d %d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= m; i++){\n        int u, v, w; scanf(\"%d %d %d\", &amp;u, &amp;v, &amp;w);\n        add(u, v, w);   //\u5b58\u50a8\u5355\u5411\u56fe,\u5982\u679c\u5b58\u50a8\u53cc\u5411\u56fe\u7684\u8bdd\u52a0\u4e0aadd(v, u, w); \n    }\n    int s = 1, t = n; //s\u4e3a\u8d77\u70b9,w\u4e3a\u7ec8\u70b9\n    Dijkstra();\n    printf(\"%d\\n\", dis[t]);\n    return 0; \n}\n</code></pre> <p>\u6211\u4eec\u6765\u6a21\u62df\u4e00\u904d\u8fd9\u4e2a\u56fe\u3002  \u829c\u6e56~\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u5f97\u51fa\u4e86\u6b63\u786e\u7684\u7ed3\u679c\u3002\u90a3\u4e48\u8fd9\u5c31\u662f$Dijkstra$\u7b97\u6cd5\u7684\u6a21\u677f\u4e86\uff0c\u5728\u505a\u9898\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u7075\u6d3b\u7684\u8fd0\u7528\u624d\u80fd\u591f\u53d6\u5f97\u7406\u60f3\u7684\u6210\u7ee9\u3002 \u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/graph/LCA/","title":"$\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA)$","text":""},{"location":"past/graph/LCA/#_1","title":"\u95f2\u8c08","text":""},{"location":"past/graph/LCA/#_2","title":"\u539f\u56e0","text":"<p>\u8fd9\u51e0\u5e74$NOIP$\u8003\u6811\u8003\u7684\u597d\u591a\uff0c\u6253\u7b97\u5199\u51e0\u7bc7\u535a\u5ba2\u6765\u589e\u5f3a\u8bb0\u5fc6\u3002$NOIP rp++$</p>"},{"location":"past/graph/LCA/#_3","title":"\u80cc\u666f","text":"<p>\u5728\u6811\u4e0a\u7684\u95ee\u9898\u4e2d\uff0c\u5bf9\u4e24\u4e2a\u70b9\u5c55\u5f00\u7684\u6709\u5f88\u591a\uff0c$LCA$\u5728\u5f88\u591a\u65f6\u5019\u4f1a\u8d77\u5230\u5f88\u5927\u7684\u4f5c\u7528\u3002</p>"},{"location":"past/graph/LCA/#_4","title":"\u7b97\u6cd5","text":""},{"location":"past/graph/LCA/#_5","title":"\u6982\u5ff5","text":"<p>\u9996\u5148\u6211\u4eec\u8981\u8c08\u8c08\u4ec0\u4e48\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\uff1a\u5bf9\u4e8e\u6709\u6839\u6811$T$\u7684\u4e24\u4e2a\u7ed3\u70b9$u\u3001v$\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148$LCA(T,u,v)$\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9$x$\uff0c\u6ee1\u8db3$x$\u662f$u$\u548c$v$\u7684\u7956\u5148\u4e14$x$\u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\u5728\u8fd9\u91cc\uff0c\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\u3002\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u8ddd\u79bb\u4e24\u4e2a\u8282\u70b9\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u3002\u6240\u4ee5\u5b83\u4e3b\u8981\u662f\u7528\u6765\u5904\u7406\u5f53\u4e24\u4e2a\u70b9\u6709\u552f\u4e00\u4e00\u6761\u786e\u5b9a\u7684\u6700\u77ed\u8def\u5f84\u65f6\u7684\u8def\u5f84\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u4ecb\u7ecd\u5176\u4ed6\u4e00\u4e9b\u7b97\u6cd5\u4e86\uff0c\u53ea\u8c08\u500d\u589e\u7684\u65b9\u6cd5\u3002</p>"},{"location":"past/graph/LCA/#lca_1","title":"\u500d\u589e$LCA$","text":"<p>\u9996\u5148\u6211\u4eec\u6765\u7406\u89e3\u4e00\u4e0b\u4ec0\u4e48\u662f\u500d\u589e\uff0c\u500d\u589e\u5c31\u662f\u6309\u7167$2$\u7684\u500d\u6570\u6765\u589e\u957f\uff0c$1\uff0c 2\uff0c 4\uff0c 8\uff0c 16\uff0c 32\u2026\u2026$\uff0c\u4f46\u6211\u4eec\u5728\u7528\u500d\u589e\u6c42\u89e3$LCA$\u7684\u65f6\u5019\u5e76\u4e0d\u4ece\u5c0f\u5230\u5927\uff0c\u800c\u662f\u4ece\u5927\u5230\u5c0f\u6765\u8fdb\u884c\uff0c$\u2026\u202632\uff0c 16\uff0c 8\uff0c 4\uff0c 2\uff0c 1$\uff0c\u6211\u4eec\u7528\u8fd9\u6837\u4e00\u4e2a\u56fe\u6765\u66f4\u597d\u7684\u7406\u89e3  \uff08\u56fe\u7247\u6765\u6e90\u4e8e\u7f51\u7edc\uff09 \u5728\u8fd9\u9897\u6811\u4e2d\uff0c$17$\u548c$18$\u7684$LCA$\u5c31\u662f$3$\u3002 \u66b4\u529b\u7684\u7b97\u6cd5\u5c31\u662f\u8ba9\u4e24\u8005\u5206\u522b\u5411\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u7a9c\uff0c\u76f4\u5230\u4e24\u8005\u76f8\u9047\u3002\u4f46\u662f\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u5927\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230\u500d\u589e\u7684\u7b97\u6cd5\u4e86\u3002 \u6211\u4eec\u4ece\u5927\u5f80\u5c0f\u4e86\u8df3\uff0c\u5982\u679c\u5927\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8c03\u5c0f\uff0c \u8fd9\u56de\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlogn)$\u8db3\u591f\u6211\u4eec\u5728\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u5b9e\u73b0\u5462\u3002 \u9996\u5148\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4ed6\u4eec\u7684\u6df1\u5ea6$depth[x]$\u548c\u4ed6\u4eec\u7684$2^i$\u7ea7\u7956\u5148$fa[i][j]$(\u8868\u793a\u8282\u70b9$i$\u7684$2^j$\u7ea7\u7956\u5148)\u3002</p> <pre><code>void dfs(int now, int fath){    //now\u8868\u793a\u5f53\u524d\u8282\u70b9,fath\u8868\u793a\u5b83\u7684\u7236\u4eb2\u8282\u70b9\n    fa[now][0] = fath;  //2\u76840\u6b21\u65b9\u4e3a1,\u5373\u5b83\u7684\u7236\u4eb2\u8282\u70b9\n    depth[now] = depth[fath] + 1;   //now\u7684\u6df1\u5ea6\u4e3a\u5b83\u7236\u4eb2\u7684\u6df1\u5ea6\u52a01\n    for(int i = 1; i &lt;= lg[depth[now]]; i++)    //lg\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u6307\u5f53\u524d\u8282\u70b9\u7684\u6df1\u5ea6\u7684\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570,\u6211\u4eec\u56de\u6eaf\u53ea\u80fd\u56de\u6eaf\u5230\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u52a0\u4e0a\u8fd9\u4e2a\u5224\u65ad\n        fa[now][i] = fa[fa[now][i - 1]][i - 1];\n        //\u8fd9\u662f\u6574\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3,\u8868\u793anow\u7684\u7b2c2 ^ i\u4e2a\u7956\u5148\u4e3anow\u7684\u7b2c2 ^ (i - 1)\u4e2a\u7956\u5148\u76842 ^ (i- 1)\u7956\u5148\n        //2 ^ i = 2 ^(i - 1) + 2 ^ (i - 1)\n    for(int i = head[now]; i; i = e[i].next)    //\u6211\u4eec\u7528\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u50a8\u6574\u4e2a\u56fe\n        if(e[i].to != fath) dfs(e[i].to, now);  //\u5982\u679cnow\u5f53\u524d\u8282\u70b9\u6307\u5411\u7684\u70b9\u4e0d\u4e3a\u5b83\u7684\u7236\u4eb2,\u90a3\u4e48\u5219\u4e3a\u5b83\u7684\u513f\u5b50,\u8fd9\u662f\u6211\u4eecnow\u4f5c\u4e3a\u7236\u8282\u70b9\u518d\u8fdb\u884cdfs,\u5c06\u5b83\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u9884\u5904\u7406\n}\n</code></pre> <p>\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u8fdb\u884c\u73a9\u4e86\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u5c06$lg$\u6570\u7ec4\u6c42\u89e3\u4e00\u904d\uff0c\u8fdb\u884c\u5e38\u6570\u4f18\u5316\u3002</p> <pre><code>for(int i = 1; i &lt;= n; i++)\n        lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i);\n</code></pre> <p>\u5728\u8fd9\u4e4b\u540e\u5c31\u662f\u500d\u589e$LCA$\u4e86\uff0c\u6211\u4eec\u5148\u5c06\u4e24\u4e2a\u70b9\u63d0\u5230\u540c\u4e00\u9ad8\u5ea6\uff0c\u518d\u7edf\u4e00\u7684\u8df3\u3002\u6ce8\u610f\u8fd9\u91cc\u5f88\u91cd\u8981\uff0c\u6211\u7b2c\u4e00\u904d\u5b66\u4e60\u7684\u65f6\u5019\u6ca1\u6709\u7406\u89e3\u900f\u5f7b\u5c31\u662f\u5361\u5728\u4e86\u8fd9\u91cc\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8df3\u5230\u4ed6\u4eec\u7684$LCA$\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u8df3\u7684\uff0c\u53ef\u80fd\u6700\u5f00\u59cb\u76f4\u63a5\u8df3\u5230\u4e86\u6839\u8282\u70b9\uff0c\u6839\u8282\u70b9\u80af\u5b9a\u662f\u4e24\u4e2a\u70b9\u7684\u7956\u5148\uff0c\u4f46\u662f\u4e0d\u662f\u6211\u4eec\u8981\u6c42\u7684\u6700\u77ed\u516c\u5171\u7956\u5148\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5f80\u4e0b\u518d\u8df3\u4e00\u5c42\uff0c\u53d1\u73b0\u8bf6\u4e24\u8005\u4e0d\u4e00\u6837\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u4e00\u5c42\u5c31\u662f\u4e24\u8005\u7684\u6700\u77ed\u516c\u5171\u7956\u5148\u3002</p> <pre><code>int LCA(int x, int y){\n    if(depth[x] &lt; depth[y]) swap(x, y); //\u6211\u4eec\u5728\u8fd9\u91cc\u5f3a\u5236x\u7684\u6df1\u5ea6&gt;=y\u7684\u6df1\u5ea6\n    while(depth[x] &gt; depth[y]) \n        x = fa[x][lg[depth[x] - depth[y]] - 1]; //\u9996\u5148\u5c06x\u548cy\u8df3\u5230\u540c\u4e00\u5c42\n    if(x == y) return x;    //\u5982\u679cx\u662fy\u7684\u7956\u5148,\u90a3\u4e48\u4ed6\u4eec\u7684LCA\u5c31\u662fx\n    for(int i = lg[depth[x]] - 1; i &gt;= 0; i--) //\u4e0d\u65ad\u7684\u5411\u4e0a\u722c\n        if(fa[x][i] != fa[y][i])      //\u6211\u4eec\u8981\u8df3\u5230\u7684\u662f\u5b83\u4eec\u7684LCA\u7684\u4e0b\u4e00\u5c42,\u6240\u4ee5\u5b83\u4eec\u80af\u5b9a\u4e0d\u4e00\u6837,\u5982\u679c\u4e0d\u76f8\u7b49\u5c31\u8df3\u8fc7\u53bb\n            x = fa[x][i], y = fa[y][i];\n    return fa[x][0];    //\u8fd4\u56de\u7236\u8282\u70b9\n}\n</code></pre> <p>\u6240\u4ee5\u5728\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u6211\u4eec\u6309\u7167\u500d\u589e$LCA$\u7684\u65b9\u6cd5\u6765\u6c42\uff0c\u8def\u5f84\u4e3a\uff1a $17 -&gt; 10 -&gt; 7 -&gt; 3$ $18 -&gt; 16 -&gt; 8 -&gt; 5 -&gt; 3$ \u6240\u4ee5\u8fd9\u5c31\u662f\u6574\u4e2a\u8fc7\u7a0b\u4e86\u3002</p>"},{"location":"past/graph/LCA/#_6","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include&lt;cstdio&gt;\n#include&lt;iostream&gt;\n#define N 500010\nusing namespace std;\nint n, m, s, cnt = 0;\nint lg[N], head[N  &lt;&lt; 1];\nint depth[N], fa[N][22];\nstruct edge{\n    int next, to;\n}e[N &lt;&lt; 1];\n\nvoid add(int u, int v){\n    e[++cnt].next = head[u];\n    e[cnt].to = v;\n    head[u] = cnt;\n}\n\nvoid dfs(int now, int fath){    //now\u8868\u793a\u5f53\u524d\u8282\u70b9,fath\u8868\u793a\u5b83\u7684\u7236\u4eb2\u8282\u70b9\n    fa[now][0] = fath;  //2\u76840\u6b21\u65b9\u4e3a1,\u5373\u5b83\u7684\u7236\u4eb2\u8282\u70b9\n    depth[now] = depth[fath] + 1;   //now\u7684\u6df1\u5ea6\u4e3a\u5b83\u7236\u4eb2\u7684\u6df1\u5ea6\u52a01\n    for(int i = 1; i &lt;= lg[depth[now]]; i++)    //lg\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u6307\u5f53\u524d\u8282\u70b9\u7684\u6df1\u5ea6\u7684\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570,\u6211\u4eec\u56de\u6eaf\u53ea\u80fd\u56de\u6eaf\u5230\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u52a0\u4e0a\u8fd9\u4e2a\u5224\u65ad\n        fa[now][i] = fa[fa[now][i - 1]][i - 1];\n        //\u8fd9\u662f\u6574\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3,\u8868\u793anow\u7684\u7b2c2 ^ i\u4e2a\u7956\u5148\u4e3anow\u7684\u7b2c2 ^ (i - 1)\u4e2a\u7956\u5148\u76842 ^ (i- 1)\u7956\u5148\n        //2 ^ i = 2 ^(i - 1) + 2 ^ (i - 1)\n    for(int i = head[now]; i; i = e[i].next)    //\u6211\u4eec\u7528\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u50a8\u6574\u4e2a\u56fe\n        if(e[i].to != fath) dfs(e[i].to, now);  //\u5982\u679cnow\u5f53\u524d\u8282\u70b9\u6307\u5411\u7684\u70b9\u4e0d\u4e3a\u5b83\u7684\u7236\u4eb2,\u90a3\u4e48\u5219\u4e3a\u5b83\u7684\u513f\u5b50,\u8fd9\u662f\u6211\u4eecnow\u4f5c\u4e3a\u7236\u8282\u70b9\u518d\u8fdb\u884cdfs,\u5c06\u5b83\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u9884\u5904\u7406\n}\n\nint LCA(int x, int y){\n    if(depth[x] &lt; depth[y]) swap(x, y); //\u6211\u4eec\u5728\u8fd9\u91cc\u5f3a\u5236x\u7684\u6df1\u5ea6&gt;=y\u7684\u6df1\u5ea6\n    while(depth[x] &gt; depth[y]) \n        x = fa[x][lg[depth[x] - depth[y]] - 1]; //\u9996\u5148\u5c06x\u548cy\u8df3\u5230\u540c\u4e00\u5c42\n    if(x == y) return x;    //\u5982\u679cx\u662fy\u7684\u7956\u5148,\u90a3\u4e48\u4ed6\u4eec\u7684LCA\u5c31\u662fx\n    for(int i = lg[depth[x]] - 1; i &gt;= 0; i--) //\u4e0d\u65ad\u7684\u5411\u4e0a\u722c\n        if(fa[x][i] != fa[y][i])      //\u6211\u4eec\u8981\u8df3\u5230\u7684\u662f\u5b83\u4eec\u7684LCA\u7684\u4e0b\u4e00\u5c42,\u6240\u4ee5\u5b83\u4eec\u80af\u5b9a\u4e0d\u4e00\u6837,\u5982\u679c\u4e0d\u76f8\u7b49\u5c31\u8df3\u8fc7\u53bb\n            x = fa[x][i], y = fa[y][i];\n    return fa[x][0];    //\u8fd4\u56de\u7236\u8282\u70b9\n}\n\nint main(){\n    scanf(\"%d %d %d\", &amp;n, &amp;m, &amp;s);\n    for(int i = 1; i &lt; n; i++){\n        int u, v; scanf(\"%d %d\", &amp;u, &amp;v);\n        add(u, v); add(v, u);\n    }\n    for(int i = 1; i &lt;= n; i++)\n        lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i);\n    dfs(s, 0);\n    for(int i = 1; i &lt;= m; i++){\n        int u, v; scanf(\"%d %d\", &amp;u, &amp;v);\n        printf(\"%d\\n\", LCA(u, v));\n    }\n    return 0;\n}\n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662f\u7528\u500d\u589e\u6765\u5b9e\u73b0$LCA$\u7684\u65b9\u6cd5\u4e86\uff0c\u53ea\u6709\u52e4\u52a0\u7ec3\u4e60\uff0c\u624d\u80fd\u591f\u5bf9\u5176\u6709\u66f4\u6df1\u523b\u7684\u7406\u89e3\u548c\u638c\u63e1\u3002 \u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/graph/MST/","title":"\u6700\u5c0f\u751f\u6210\u6811$(MST)$","text":""},{"location":"past/graph/MST/#_1","title":"\u95f2\u8c08","text":""},{"location":"past/graph/MST/#_2","title":"\u539f\u56e0","text":"<p>\u53c8\u662f\u849f\u84bb\u7684\u4e00\u7bc7\u4e3a\u4e86\u8bb0\u5fc6\u5199\u7684\u535a\u5ba2\uff0c\u624e\u5b9e\u77e5\u8bc6\u70b9\u3002</p>"},{"location":"past/graph/MST/#_3","title":"\u80cc\u666f","text":"<p>\u5f88\u591a\u56fe\u8bba\u7684\u9898\u76ee\u4f1a\u9996\u5148\u8981\u6c42\u6211\u4eec\u5c06\u56fe\u8f6c\u5316\u6210\u6811\u72b6\u7ed3\u6784\u518d\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\uff0c\u800c\u5728\u8fd9\u7bc7\u6587\u7ae0\u5f53\u4e2d\u6211\u5c06\u4f1a\u4ecb\u7ecd\u4e00\u79cd\u6700\u5e38\u89c1\u7684\u7b97\u6cd5$Kruskal$\u6765\u89e3\u51b3\u6700\u5c0f\u751f\u6210\u6811\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"past/graph/MST/#kruskal","title":"$Kruskal$","text":""},{"location":"past/graph/MST/#_4","title":"\u80cc\u666f","text":"<p>$Kruskal$\u4f5c\u4e3a\u6700\u7ecf\u5178\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u5728\u7a0d\u5fae\u6539\u52a8\u540e\u4e5f\u53ef\u4ee5\u6c42\u51fa\u6700\u5927\u751f\u6210\u6811\u3002\u662f\u7531$Joseph Bernard Kruskal$\u53d1\u660e\u7684\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(elog_2e)$\uff0c\u9002\u5408\u758f\u677e\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002</p>"},{"location":"past/graph/MST/#_5","title":"\u5206\u6790","text":"<p>$Kruskal$\u7684\u601d\u8def\u4e3a\uff1a\u5047\u8bbe\u8fde\u901a\u7f51$G=\uff08V\uff0cE\uff09$\uff0c\u4ee4\u6700\u5c0f\u751f\u6210\u6811\u7684\u521d\u59cb\u72b6\u6001\u4e3a\u53ea\u6709$n$\u4e2a\u9876\u70b9\u800c\u65e0\u8fb9\u7684\u975e\u8fde\u901a\u56fe$T=\uff08V\uff0c{}\uff09$\uff0c\u56fe\u4e2d\u6bcf\u4e2a\u9876\u70b9\u81ea\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u5728$E$\u4e2d\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\uff0c\u82e5\u8be5\u8fb9\u4f9d\u9644\u7684\u9876\u70b9\u5206\u522b\u5728$T$\u4e2d\u4e0d\u540c\u7684\u8fde\u901a\u5206\u91cf\u4e0a\uff0c\u5219\u5c06\u6b64\u8fb9\u52a0\u5165\u5230$T$\u4e2d\uff1b\u5426\u5219\uff0c\u820d\u53bb\u6b64\u8fb9\u800c\u9009\u62e9\u4e0b\u4e00\u6761\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\u3002\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3$T$\u4e2d\u6240\u6709\u9876\u70b9\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e3a\u6b62\u3002\u6211\u4eec\u7528\u6bd4\u8f83\u6b63\u5e38\u7684\u65b9\u6cd5\u6765(\u7ffb\u8bd1)\u4e00\u904d\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u524d\u7f6e\u6280\u5de7\uff1a\u5e76\u67e5\u96c6\u3002</p>"},{"location":"past/graph/MST/#_6","title":"\u5e76\u67e5\u96c6","text":"<p>\u5e76\u67e5\u96c6\u5e76\u4e0d\u662f\u672c\u7bc7\u6587\u7ae0\u7684\u91cd\u70b9\uff0c\u53ea\u5c06\u7b80\u5355\u4ecb\u7ecd\u5b83\u7684\u7528\u6cd5\u548c\u57fa\u672c\u601d\u60f3\u3002\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u53ef\u4ee5\u5feb\u901f\u7684\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u7684\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u9996\u5148\u7528\u6570\u7ec4$fa[N]$\u6765\u8bb0\u5f55\u5b83\u96b6\u5c5e\u54ea\u4e2a\u96c6\u5408\uff0c\u7b2c\u4e00\u6b65\u662f\u521d\u59cb\u5316\uff0c\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u5728\u96c6\u5408\u5b9a\u4e49\u4e3a\u5b83\u81ea\u5df1$fa[i] = i$\u6211\u4eec\u7528\u4e00\u4e2a$find$\u51fd\u6570\u6765\u8fdb\u884c\u67e5\u627e\u7684\u5de5\u4f5c</p> <pre><code>int find(int x){\n    if(x != fa[x]) fa[x] = find(fa[x]);\n    return fa[x];\n}\n</code></pre> <p>\u901a\u8fc7\u8fd9\u4e2a\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u5b83\u6240\u5728\u7684\u96c6\u5408\u4e86\uff0c\u5982\u679c\u60f3\u8981\u5c06\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5c06\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684$fa$\u503c\u8bbe\u4e3a\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684\u503c\u5373\u53ef\u3002</p> <p>\u6211\u4eec\u56de\u5f52\u5230\u6b63\u9898$Kruskal$\uff0c$Kruskal$\u7b97\u6cd5\u662f\u6839\u636e\u8fb9\u7684\u6743\u503c\u7528\u9012\u589e\u7684\u65b9\u5f0f\uff0c\u4e00\u6b21\u627e\u51fa\u8fb9\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u6765\u5efa\u7acb\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u4e14\u6bcf\u6b21\u6240\u6dfb\u52a0\u7684\u8fb9\u4e0d\u80fd\u9020\u6210\u751f\u6210\u6811\u7684\u56de\u8def\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u521a\u624d\u63d0\u5230\u7684\u5e76\u67e5\u96c6\u6765\u505a\u5230\u4e86\uff0c\u76f4\u5230\u627e\u5230\u7b2c$N - 1$\u4e2a\u8fb9\u4e3a\u6b62\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u4f8b\u5b50\u6765\u66f4\u597d\u7684\u7406\u89e3  \u6211\u4eec\u9996\u5148\u5c06\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6743\u5feb\u6392\u3002 \u9996\u5148\u5c06\u6700\u77ed\u7684\u8fb9$(1, 3)$\u52a0\u5165\u751f\u6210\u6811\u4e2d  \u7b2c\u4e8c\u6b65\u5c06$(3, 4)$\u52a0\u5165\u751f\u6210\u6811\u4e2d  \u7b2c\u4e09\u6b65\u5c06$(3, 5)$\u52a0\u5165\u751f\u6210\u6811\u4e2d  \u6ce8\u610f\u63a5\u4e0b\u6765\u7684\u4e00\u90e8\u975e\u5e38\u5173\u952e\uff0c\u9700\u8981\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6309\u7167\u8fb9\u6743\u6765\u6dfb\u52a0\u7684\u8bdd\uff0c\u5e94\u8be5\u6dfb\u52a0\u7684\u8fb9\u4e3a$(4, 5)$\u4f46\u662f\u6211\u4eec\u53d1\u73b0$4$\u548c$5$\u5df2\u7ecf\u90fd\u88ab\u52a0\u5165\u5230\u751f\u6210\u6811\u5f53\u4e2d\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5176\u8df3\u8fc7\u6dfb\u52a0$(4, 2)$  \u8fd9\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86$4$\u6761\u8fb9\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002 \u5728\u8fdb\u884c\u6bcf\u6b21\u52a0\u8fb9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651 $$1\u3001\u5b83\u662f\u5426\u662f\u5269\u4e0b\u7684\u8fb9\u4e2d\u6700\u5c0f\u7684  2\u3001\u52a0\u5165\u5b83\u662f\u5426\u4f1a\u751f\u6210\u73af$$</p>"},{"location":"past/graph/MST/#_7","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include&lt;cstdio&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#define N 100010\nusing namespace std;\nint n, m, ans = 0, cnt = 0;\nint head[N], fa[N];\nstruct edge{\n    int u, v, w;\n}e[N &lt;&lt; 1];\ninline int read(){\n    int s = 0;\n    char ch = getchar();\n    while(ch &lt; '0' || ch &gt; '9') ch = getchar();\n    while(ch &gt;= '0' &amp;&amp; ch &lt;= '9'){s = s * 10 + ch - '0'; ch = getchar();}\n    return s;\n}\nbool cmp(edge a, edge b){return a.w &lt; b.w;}\nint find(int x){    //!!!\u975e\u5e38\u91cd\u8981,\u5e76\u67e5\u96c6\u6a21\u677f \n    if(x != fa[x]) fa[x] = find(fa[x]);\n    return fa[x];\n}\nvoid Kruskal(){ //Kruskal\u6a21\u677f \n    sort(e + 1, e + m + 1, cmp);\n    for(int i = 1; i &lt;= n; i++) fa[i] = i;\n    for(int i = 1; i &lt;= m; i++){\n        int x = find(e[i].u), y = find(e[i].v);\n        if(x == y) continue;    //\u5982\u679c\u4e24\u6761\u8fb9\u5df2\u7ecf\u8054\u901a\u90a3\u4e48\u8df3\u8fc7 \n        ans += e[i].w;\n        fa[x] = y;  //\u5c06\u4e24\u4e2a\u70b9\u5408\u5e76 \n        if(++cnt == n - 1) break; //\u5f53n - 1\u6761\u8fb9\u65f6\u7ed3\u675f \n    }\n}\nint main(){\n    n = read(); m = read();\n    for(int i = 1; i &lt;= m; i++){\n        int x, y, z; \n        x = read(); y = read(); z = read();\n        e[i].u = x; e[i].v = y; e[i].w = z;\n    }\n    Kruskal();\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre> <p>\u6211\u4eec\u6765\u6a21\u62df\u4e00\u904d\u8fd9\u4e2a\u56fe\u3002  \u5f88\u660e\u663e\uff0c\u5f97\u51fa\u4e86\u6b63\u786e\u7684\u7b54\u6848\u3002\u90a3\u4e48\u8fd9\u5c31\u662f$Kruskal$\u7b97\u6cd5\uff0c\u6211\u4eec\u8981\u7075\u6d3b\u7684\u5e94\u7528\u5b83\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u6c42\u6700\u5927\u751f\u6210\u6811\uff0c\u6211\u4eec\u53ea\u8981\u53cd\u7740\u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\u3002 \u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/graph/SPFA/","title":"\u6700\u77ed\u8def\u95ee\u9898$(2)$","text":""},{"location":"past/graph/SPFA/#_1","title":"\u95f2\u626f","text":""},{"location":"past/graph/SPFA/#_2","title":"\u539f\u56e0","text":"<p>\u540c\u4e0a\u4e00\u7bc7\uff08$\u61d2\u5f97\u6253\u5b57\u4e86$\uff09\u3002</p>"},{"location":"past/graph/SPFA/#_3","title":"\u80cc\u666f","text":"<p>\u5728\u56fe\u8bba\u9898\u5f53\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u9047\u5230\u8d1f\u6743\u8fb9\uff0c\u5728\u8fd9\u65f6\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u8fc7\u7684$Dijkstra$\u5c31\u65e0\u6cd5\u53d1\u6325\u4f5c\u7528\u4e86\uff0c\u6211\u4eec\u6765\u770b\u8fd9\u6837\u4e00\u4e2a\u7b80\u5355\u7684\u573a\u666f\u3002  \u6211\u4eec\u4ece\u70b9$1$\u51fa\u53d1\uff0c\u6211\u4eec\u5728\u5faa\u73af\u7684\u65f6\u5019\u4f1a\u5c06\u70b9$3$\u5148\u6807\u8bb0\u4e0a\uff0c\u8fd9\u6837$dis[3] = 1$\uff0c\u4f46\u662f\u6211\u4eec\u660e\u663e\u53ef\u4ee5\u89c2\u5bdf\u5f97\u51fa\uff0c\u6700\u77ed\u7684\u8def\u5f84\u5e94\u8be5\u662f$1\\rightarrow2\\rightarrow3$\u5e94\u8be5$dis[3] = -2$\uff0c\u4f46\u662f\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u628a\u70b9$3$\u6807\u8bb0\u4e0a\u4e86\uff0c\u6240\u4ee5\u4e0d\u53ef\u4ee5\u518d\u8fdb\u884c\u4fee\u6539\uff0c\u4e5f\u5c31\u4f1a\u5f97\u51fa\u9519\u8bef\u7684\u7b54\u6848\u3002\u8fd9\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u79cd\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\u7684\u7b97\u6cd5\u4e86\u3002</p>"},{"location":"past/graph/SPFA/#bellman-ford","title":"$Bellman-Ford$","text":""},{"location":"past/graph/SPFA/#_4","title":"\u80cc\u666f","text":"<p>(\u4e0d\u662f\u8981\u8bf4$SPFA$\u561b\u5212\u53bb)\uff0c\u5176\u5b9e\u5bf9\u4e8e\u8d1f\u6743\u8fb9\u7684\u56fe\uff0c\u6700\u5f00\u59cb\u51fa\u73b0\u7684\u7b97\u6cd5\u662f$Bellman-Ford$\uff0c\u4e00\u4f1a\u518d\u8c08$SPFA$\uff0c\u56e0\u4e3a$SPFA$\u90fd\u662f\u57fa\u4e8e$Bellman-Ford$\u4e0a\u901a\u8fc7\u4f18\u5316\u800c\u5f97\u51fa\u7684\uff0c\u6211\u4eec\u9996\u5148\u8981\u5bf9$Bellman-Ford$\u6709\u4e00\u4e2a\u4e86\u89e3\u3002$Bellman-Ford$\u662f\u7531$Richard Bellman$\u548c$Lester Ford$\u4e24\u4f4d\u5927\u795e\u521b\u9020\u7684\uff0c\u56e0\u6b64\u5f97\u540d\u3002</p>"},{"location":"past/graph/SPFA/#_5","title":"\u5206\u6790","text":"<p>$Bellman-Ford$\u7684\u767e\u5ea6\u89e3\u91ca\u5982\u4e0b(\u770b\u770b\u5373\u53ef\uff0c\u53cd\u6b63\u4e5f\u770b\u4e0d\u660e\u767d\u30fd(\u30fc_\u30fc)\u30ce)\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e26\u6743\uff08\u6709\u5411\u6216\u65e0\u5411\uff09\u56fe$G = (V, E)$, \u5176\u6e90\u70b9\u4e3a$s$\uff0c\u52a0\u6743\u51fd\u6570$w$\u662f\u8fb9\u96c6$E$\u7684\u6620\u5c04\u3002\u5bf9\u56fe$G$\u8fd0\u884c$Bellman - Ford$\u7b97\u6cd5\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u660e\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u7740\u4e00\u4e2a\u4ece\u6e90\u70b9$s$\u53ef\u8fbe\u7684\u8d1f\u6743\u56de\u8def\u3002\u82e5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u56de\u8def\uff0c\u7b97\u6cd5\u5c06\u7ed9\u51fa\u4ece\u6e90\u70b9$s$\u5230\u56fe$G$\u7684\u4efb\u610f\u9876\u70b9$v$\u7684\u6700\u77ed\u8def\u5f84$d[v]$\u3002\u6211\u7684\u7406\u89e3\u662f\u5c06$Bellman-Ford$\u7b97\u6cd5\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a\u9996\u5148\u662f\u8981\u521d\u59cb\u5316\uff0c\u5c06\u9664\u4e86\u8d77\u70b9\u4e4b\u5916\u7684\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77\u5927$d[i] = +\\infty, d[0] = 0$\uff1b\u4e0b\u4e00\u6b65\u662f\u8fed\u4ee3\u6c42\u89e3\uff0c\u53cd\u590d\u7684\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b(\u677e\u5f1b\u6307\u7684\u662f\u5c06\u6240\u63a8\u51fa\u6765\u7684\u6743\u503c\u4e0e\u5230\u8fd9\u4e2a\u70b9\u539f\u6765\u7684\u6743\u503c\u505a\u5bf9\u6bd4\uff0c\u53d6\u5c0f\u7684)\uff0c\u4f7f\u6bcf\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb$d[i]$\u4f30\u8ba1\u503c\u903c\u8fd1\u6700\u77ed\u8ddd\u79bb(\u8fd0\u884c$n - 1$\u6b21)\uff1b\u6700\u540e\u4e00\u6b65\u5219\u662f\u8981\u68c0\u9a8c\u8d1f\u6743\u56de\u8def\uff0c\u901a\u8fc7\u677e\u5f1b\u7684\u64cd\u4f5c\u6765\u5224\u65ad\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u6536\u655b\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u4e48\u8bf4\u660e\u5b58\u5728\u8d1f\u6743\u56de\u8def\u8fd4\u56de$false$\uff0c\u5426\u5219\u7684\u8bdd\u8fd4\u56de$true$\u5e76\u8f93\u51fa$d[i]$\u3002\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa$Bellman-Ford$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(VE)$\uff0c$(V\u4e3a\u8282\u70b9\u6570\uff0cE\u4e3a\u8fb9\u6570)$\u3002</p>"},{"location":"past/graph/SPFA/#_6","title":"\u5177\u4f53\u4f8b\u5b50","text":"<p>\u6211\u4eec\u6765\u770b\u8fd9\u6837\u7684\u4e00\u4e2a\u56fe\u3002  \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8bbe$w[i, j]$\u4e3a\u5404\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u5148\u7528\u90bb\u63a5\u8868\u6765\u8868\u793a\u3002  \u6211\u4eec\u8bbe$d[i]$\u4e3a\u4ece\u70b9$1$\u81f3\u70b9$i$\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u5c06\u5b83\u4eec\u521d\u59cb\u5316$d[i] = +\\infty, d[0] = 0$\u3002  (1)\u7b2c\u4e00\u6b65\u6c42$d[2]$\u7684\u503c$d[1] + w[1, 2] &lt; d[2] + w[2, 2] &lt; d[3] + w[3, 2] &lt; d[4] + d[4, 2];$\u6240\u4ee5\u6211\u4eec\u5f97\u51fa$d[2] = d[1] + w[1, 2] = 2;$\u3002 (2)\u7b2c\u4e8c\u6b65\u6c42$d[3]$\u7684\u503c$d[1] + w[1, 3] &lt; d[2] + w[2, 3] &lt; d[3] + w[3, 3] &lt; d[4] + d[4, 3];$\u6240\u4ee5\u6211\u4eec\u5f97\u51fa$d[3] = d[1] + w[1, 3] = 5;$\u3002 (3)\u7b2c\u4e8c\u6b65\u6c42$d[4]$\u7684\u503c$d[2] + w[2, 4] &lt; d[1] + w[1, 4] &lt; d[3] + w[3, 4] &lt; d[4] + d[4, 4];$\u6240\u4ee5\u6211\u4eec\u5f97\u51fa$d[2] = d[1] + w[1, 2] = 1;$\u3002  \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u4e00\u5171\u8fdb\u884c\u4e86$3$\u6b21\u677e\u5f1b\u64cd\u4f5c\u3002 \u63a5\u4e0b\u6765\u7ee7\u7eed\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u6765\u68c0\u67e5\u662f\u5426\u5b58\u5728\u8d1f\u6743\u8fb9\uff0c\u82e5\u679c\u53d1\u73b0$d[i]$\u7684\u503c\u53d8\u5c0f\uff0c\u90a3\u4e48\u8bf4\u660e\u5b58\u5728\u8d1f\u6743\u8fb9\u5e76\u9000\u51fa\uff0c\u5426\u5219\u7684\u8bdd\u5c31\u8f93\u51fa\u6700\u77ed\u8def\u5f84\u3002\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u770b\u51fa$d[4] + w[4, 2] &lt; d[4]$\uff0c\u8bf4\u660e\u5b58\u5728\u8d1f\u6743\u8fb9\u3002</p>"},{"location":"past/graph/SPFA/#_7","title":"\u4f18\u5316","text":"<p>\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b$Bellman-Ford$\u7b97\u6cd5\uff0c\u53ef\u4ee5\u770b\u51fa\u6700\u5916\u5c42\u7684\u5faa\u73af\u8fed\u4ee3\u6b21\u6570\u4e3a$n - 1$\u6b21\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u6700\u5916\u5c42\u7684\u5faa\u73af\u6b21\u6570\u5e94\u8be5\u8fdc\u5c0f\u4e8e$n - 1$\u3002\u6211\u4eec\u6765\u601d\u8003\uff0c\u5728\u4e00\u6b21\u8fed\u4ee3\u5f53\u4e2d\uff0c\u5982\u679c\u677e\u5f1b\u7684\u64cd\u4f5c\u672a\u88ab\u6267\u884c\uff0c\u90a3\u4e48\u8bf4\u660e\u5728\u8fd9\u6b21\u8fed\u4ee3\u5f53\u4e2d\u6240\u6709\u7684\u8fb9\u90fd\u6ca1\u6709\u88ab\u677e\u5f1b\uff0c\u8fd9\u5c31\u8bf4\u660e\u4efb\u610f\u7684\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5728\u4ee5\u540e\u7684\u8fed\u4ee3\u4e2d\u4e0d\u4f1a\u518d\u53ef\u80fd\u88ab\u7f29\u5c0f\u4e86\uff0c\u56e0\u6b64\uff0c\u8fed\u4ee3\u8fc7\u7a0b\u5e94\u8be5\u88ab\u63d0\u524d\u7ed3\u675f\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a$bool$\u578b\u53d8\u91cf$relaxed$\uff0c\u521d\u59cb\u503c\u4e3a$false$\uff0c\u5982\u679c\u5728\u4e00\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6709\u8fb9\u88ab\u6210\u529f\u677e\u5f1b\uff0c\u90a3\u4e48\u4ef7\u683c$relaxed$\u8bbe\u7f6e\u4e3a$true$\uff0c\u5426\u5219\u7684\u8bdd\u8bf4\u660e\u6ca1\u6709\u6267\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed3\u675f\u5916\u5c42\u5faa\u73af\u3002</p> <pre><code>bool Bellman_Ford_Plus(int x){\n    bool relaxed;\n    for(int i = 1; i &lt;= n; i++) d[i] = Max;\n    d[x] = 0;\n    for(int i = 1; i &lt; n; i++){\n        relaxed = false;\n        for(int j = 1; j &lt;= n; j++)\n            for(int k = 1; k &lt;= n; k++)\n                if(d[j] &gt; d[k] + w[j][k]){\n                    d[j] = d[k] + w[j][k];\n                    relaxed = true;\n                }\n        if(!relaxed) break;\n    }\n    for(int i = 1; i &lt;= n; i++) //\u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af \n        for(int j = 1; j &lt;= n; j++)\n            if(d[i] &gt; d[j] + w[i][j])\n                return 1;   //\u6709\u8d1f\u73af \n    return 0;               //\u65e0\u8d1f\u73af \n}\n</code></pre>"},{"location":"past/graph/SPFA/#spfa","title":"$SPFA$","text":""},{"location":"past/graph/SPFA/#_8","title":"\u5206\u6790","text":"<p>\u7ec8\u4e8e\u5230\u4e86\u4eca\u5929\u7684\u91cd\u5934\u620f\u4e86\uff0c$SPFA$\u662f\u57fa\u4e8e$Bellman-Ford$\u7684\u66f4\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u60c5\u51b5\u4e0b\u4e3a$O(kE)$\uff0c\u4e00\u822c$k \\leq 2$\u3002$SPFA$\u548c$Bellman-Ford$\u7684\u5b9e\u8d28\u90fd\u662f\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u7684\u4f30\u8ba1\u503c\uff0c\u4f46\u662f$SPFA$\u7684\u5173\u952e\u5728\u4e8e:$\\textbf{\u53ea\u6709\u90a3\u4e9b\u5728\u524d\u4e00\u904d\u677e\u5f1b\u8fc7\u7a0b\u4e2d\u6539\u53d8\u4e86\u8ddd\u79bb\u4f30\u8ba1\u503c\u7684\u70b9\uff0c\u624d\u53ef\u80fd\u5f15\u8d77\u4ed6\u4eec\u7684\u4e34\u754c\u70b9\u7684\u8ddd\u79bb\u4f30\u8ba1\u503c\u7684\u6539\u53d8}$\u3002 \u5728\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u961f\u5217\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u7684\uff0c\u9996\u5148\u5c06\u5404\u4e2a\u70b9\u7684\u8ddd\u79bb\u4f30\u8ba1\u503c\u8bbe\u4e3a$+\\infty$\uff0c\u5e76\u5c06\u8d77\u59cb\u70b9\u52a0\u5165\u5230\u961f\u5217\u5f53\u4e2d\u3002\u6211\u4eec\u6bcf\u6b21\u4ece\u961f\u9996\u53d6\u51fa\u4e00\u4e2a\u70b9$i$\uff0c\u904d\u5386\u4e0e$i$\u76f8\u8054\u901a\u7684\u70b9$j$\uff0c\u5982\u679c$d[j] &gt; d[i] + w[i][j]$\uff0c\u5219\u9700\u8981\u8fdb\u884c\u677e\u5f1b$d[j] = d[i] +w[i][j]$\uff0c\u5e76\u5c06\u5176\u5b58\u5165\u6700\u77ed\u8def\uff0c\u5e76\u53ef\u4ee5\u8bb0\u5f55\u8fd9\u4e2a\u9876\u70b9\u8fdb\u5165\u8fdb\u961f\u6b21\u6570\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8d1f\u73af\u3002\u76f4\u5230\u961f\u7a7a\u7684\u65f6\u5019\u505c\u6b62\u3002</p>"},{"location":"past/graph/SPFA/#_9","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u6211\u662f\u4ee5\u6d1b\u8c37P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u4e3a\u539f\u9898\u505a\u7684\u6a21\u677f\u3002</p> <pre><code>#include&lt;queue&gt; \n#include&lt;cstdio&gt;\n#define INF 2147483647\nusing namespace std;\nconst int N = 500010;\nint n, m, s, cnt = 0;\nint head[N], dis[10010];    //dis\u8bb0\u5f55\u5230\u8d77\u70b9\u7684\u957f\u5ea6   \nbool vis[N];    //vis\u8bb0\u5f55\u662f\u5426\u5728\u961f\nstruct edge{\n    int to, next, w;\n}e[N];\nvoid add(int u, int v, int w){\n    e[++cnt].next = head[u];\n    e[cnt].to = v;\n    e[cnt].w = w;\n    head[u] = cnt;\n}\nvoid SPFA(){\n    for(int i = 1; i &lt;= n; i++){\n        dis[i] = INF;\n        vis[i] = false;\n    }\n    dis[s] = 0; //\u8d77\u70b9\u5230\u672c\u8eab\u7684\u8ddd\u79bb\u4e3a0\n    queue&lt;int&gt; q;\n    q.push(s);  //\u8d77\u70b9\u5165\u961f \n    vis[s] = true;\n    while(!q.empty()){  //\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a \n        int u = q.front();  //\u53d6\u51fa\u961f\u9996 \n        q.pop();    //\u5c06\u5176\u5f39\u51fa \n        vis[u] = false; \n        for(int i = head[u]; i; i = e[i].next){ //\u94fe\u5f0f\u524d\u5411\u661f\u904d\u5386 \n            int v = e[i].to;\n            if(dis[v] &gt; dis[u] + e[i].w){   //\u677e\u5f1b \n                dis[v] = dis[u] + e[i].w;\n                if(!vis[v]){    //\u5982\u679c\u6ca1\u6709\u5165\u961f \n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d %d %d\", &amp;n, &amp;m, &amp;s);\n    for(int i = 1; i &lt;= m; i++){\n        int u, v, w; scanf(\"%d %d %d\", &amp;u, &amp;v, &amp;w);\n        add(u, v, w); //\u6709\u5411\u56fe, \u65e0\u5411\u52a0 add(v, u, w);\n    }\n    SPFA();\n    for(int i = 1; i &lt;= n; i++)\n        if(s == i) printf(\"0 \");\n        else printf(\"%d \", dis[i]);\n    return 0;\n} \n</code></pre> <p>\u6211\u4eec\u6a21\u62df\u4e00\u4e0b\u4e0a\u9762\u7684\u56fe\u3002  \u7ed3\u679c\u975e\u5e38\u6b63\u786e\uff0c\u5f97\u5230\u4e86\u6b63\u786e\u7684\u7b97\u6cd5\u3002\u90a3\u4e48\u8fd9\u5c31\u662f$Bellman-Ford$\u548c$SPFA$\u7b97\u6cd5\u4e86\uff0c$SPFA$\u7684\u901f\u5ea6\u975e\u5e38\u5feb\u4f46\u662f\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u5982\u679c\u662f\u7a20\u5bc6\u56fe\u7684\u8bdd\uff0c\u51fa\u9898\u4eba\u5f80\u5f80\u4f1a\u5361\u5e38\uff0c\uff08\u4f8b\u5982NOI2018D1T1\uff09\uff0c\u6240\u4ee5\u5728\u4e3a\u6b63\u6743\u56fe\u65f6\uff0c\u8fd8\u662f\u8981\u7528$Dijkstra$\u7b97\u6cd5\uff0c\u5f53\u51fa\u73b0\u8d1f\u6743\u56fe\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u80c6\u7684\u4f7f\u7528$SPFA$\u4e86\u3002 \u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/graph/forwardstar/","title":"\u95f2\u626f","text":""},{"location":"past/graph/forwardstar/#_2","title":"\u539f\u56e0","text":"<p>\u672c\u849f\u84bb\u8bb0\u6027\u4e0d\u592a\u597d(\uff40\u30fb\u03c9\u30fb\u00b4)\uff0c\u5199\u4e00\u7bc7\u94fe\u5f0f\u524d\u5411\u661f\u7684\u535a\u5ba2\u9632\u6b62\u81ea\u5df1\u4ee5\u540e\u518d\u5fd8\u3002</p>"},{"location":"past/graph/forwardstar/#_3","title":"\u80cc\u666f","text":"<p>\u6211\u4eec\u5728\u505a\u56fe\u8bba\u9898\u7684\u65f6\u5019\u9996\u5148\u5fc5\u987b\u8981\u505a\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u5b58\u56fe\uff0c\u53ea\u6709\u5c06\u6574\u4e2a\u56fe\u642d\u5efa\u8d77\u6765\uff0c\u6211\u4eec\u624d\u80fd\u591f\u5728\u4e0a\u9762\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u6784\u5efa\u90bb\u63a5\u77e9\u9635\u6765\u8bb0\u5f55\u662f\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u6cd5\uff08\u56e0\u4e3a\u4ed6\u7b80\u5355\uff09\uff0c\u4f46\u662f\u5f80\u5f80\u4f1a\u635f\u5931\u6389\u4e0d\u5fc5\u8981\u7684\u7a7a\u95f4\uff0c\u5bfc\u81f4\u7a7a\u95f4\u76f4\u63a5\u70b8\u6389\uff0c50000\u00d750000\u7684\u5c31\u5df2\u7ecf\u8db3\u4ee5\u5361\u4f4f\u7a0b\u5e8f\u4e86\uff0c\u66f4\u522b\u63d0\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u6211\u4eec\u4e00\u822c\u90fd\u662f100000\u8d77\u6b65\uff0c\u8fd9\u65f6\u795e\u7287\u4eec\u5c31\u521b\u9020\u4e86\u4e00\u79cd\u7ed3\u6784\uff0c\u7528\u6765\u5b58\u653e\u56fe\uff0c\u4fbf\u4e3a\u94fe\u5f0f\u524d\u5411\u661f\u3002 </p>"},{"location":"past/graph/forwardstar/#_4","title":"\u7b97\u6cd5","text":"<p>\u770b\u8fd9\u4e2a\u540d\u5b57\u6211\u4eec\u5c31\u80fd\u591f\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u901a\u8fc7\u94fe\u8868\u6765\u8fdb\u884c\u50a8\u5b58\u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u4e00\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u94fe\u8868\u7684\u8d77\u70b9\uff0c\u5e76\u5c06\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u8fb9\u4ee5\u94fe\u8868\u7684\u65b9\u5f0f\u8fde\u63a5\u5728\u4e00\u8d77\u3002</p>"},{"location":"past/graph/forwardstar/#_5","title":"\u51c6\u5907","text":"<p>\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2ahead[i]\u6570\u7ec4\u6765\u8bb0\u5f55\u4ee5i\u4e3a\u8d77\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u5176\u6b21\u6211\u4eec\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b58\u50a8\u6bcf\u6761\u8fb9\u7684\u4e00\u4e9b\u4fe1\u606f\u3002</p> <pre><code>int edge[N];\nstruct edge{\n      int w;      //w\u8868\u793a\u7684\u662f\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\n      int to;     //to\u8868\u793a\u7684\u662f\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9 \n      int next;   //next\u8868\u793a\u7684\u662f\u548c\u8fd9\u6761\u8fb9\u540c\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5b58\u50a8\u4f4d\u7f6e\n}e[N];\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\u5b58\u50a8\u8d77\u6765\u4e86\u3002</p>"},{"location":"past/graph/forwardstar/#_6","title":"\u589e\u8fb9","text":"<p>\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5c06\u6570\u636e\u8f93\u5165\u8fdb\u53bb\u5462\uff1f\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230\u4e00\u4e2aadd\u51fd\u6570\u3002</p> <pre><code>int cnt = 0; //\u7528\u6765\u8bb0\u5f55\u662f\u7b2c\u51e0\u6761\u8fb9\nvoid add(int u, int v, int w){  //u\u4e3a\u8d77\u70b9,v\u4e3a\u7ec8\u70b9,w\u4e3a\u8fb9\u6743\n      e[++cnt].next = head[u];      \n      e[cnt].w = w;\n      e[cnt].to = v;\n      head[u] = cnt;\n}\n</code></pre> <p>\u8fd9\u90e8\u5206\u6211\u4eec\u505a\u4e00\u4e2a\u56fe\u53ef\u4ee5\u66f4\u597d\u7684\u7406\u89e3\u8fd9\u4e2aadd\u51fd\u6570\u3002 \uff08\u8bf7\u539f\u8c05\u6211\u7c97\u7cd9\u7684\u753b\u5de5\uff09 \u901a\u8fc7\u8fd9\u4e2a\u56fe\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u6e05\u6670\u7684\u660e\u767d\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u6bcf\u4e2a\u53d8\u91cf\u7684\u610f\u601d\uff0cto\u65e2\u7528\u6765\u6307\u5411\u8fd9\u6761\u8fb9\u7ec8\u70b9\uff0cw\u4e3a\u8fb9\u6743\uff0cnext\u662f\u4e0b\u4e00\u6761\u8fb9\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u800chead[u]\u5219\u7528\u6765\u8bb0\u5f55\u8fd9\u6761\u8fb9\u5728\u6574\u4e2a\u94fe\u8868\u5f53\u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"past/graph/forwardstar/#_7","title":"\u904d\u5386","text":"<p>\u6211\u4eec\u5efa\u56fe\u90fd\u662f\u4e3a\u4e86\u904d\u5386\u5b83\u6765\u505a\u7684\u524d\u7f6e\u51c6\u5907\u5de5\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7528\u4e00\u4e2afor\u5faa\u73af\u6765\u5bf9\u5b83\u8fdb\u884c\u904d\u5386\u3002</p> <pre><code>for(int i = head[x]; i; i = edge[i].next)\n</code></pre> <p>\u6211\u4eec\u4ecex\u8fd9\u6761\u8fb9\u5f00\u59cb\u904d\u5386\uff0c\u9996\u5148i\u53d6\u7684\u662fx\u8fd9\u6761\u8fb9\u5b83\u6240\u5904\u5728\u94fe\u8868\u4e2d\u7684\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\uff0ci = edge[i].next\u6307\u7684\u662fi\u4e0b\u4e00\u4e2a\u904d\u5386\u7684\u5bf9\u8c61\u662fi\u8fd9\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u4e0b\u4e00\u6761\u8fb9\uff0c\u4e2d\u95f4\u7684i\u662f\u7528\u6765\u4fdd\u8bc1i\u5927\u4e8e0\uff0c\u8fd9\u6837\u7684\u8bdd\u5f53\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019next\u6307\u5411\u7684\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5faa\u73af\u5c06\u4f1a\u7ed3\u675f\uff0c\u6211\u4eec\u5c31\u4f1a\u5f88\u5bb9\u6613\u7684\u5c06\u8fd9\u4e2a\u56fe\u904d\u5386\u4e00\u904d\u3002 \u90a3\u4e48\u63a5\u4e0b\u6765\u4fbf\u662f\u5b8c\u6574\u7684\u4ee3\u7801\u4e86\u3002</p> <pre><code>#include&lt;cstdio&gt;\n#define N 100010\nusing namespace std;\nint n, m, x, cnt = 0;   // n\u4e2a\u70b9, m\u6761\u8fb9,\u904d\u5386\u7684\u70b9,cnt\u7528\u6765\u8bb0\u5f55\u7b2c\u51e0\u6761\u8fb9 \nint head[N];\nstruct edge{\n    int w;      //w\u8868\u793a\u7684\u662f\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\n    int to;     //to\u8868\u793a\u7684\u662f\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9 \n    int next;   //next\u8868\u793a\u7684\u662f\u548c\u8fd9\u6761\u8fb9\u540c\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5b58\u50a8\u4f4d\u7f6e\n}e[N]; \nvoid add(int u, int v, int w){\n    e[++cnt].next = head[u];        \n    e[cnt].w = w;\n    e[cnt].to = v;\n    head[u] = cnt;\n}\nvoid dfs(int x){\n    for(int i = head[x]; i; i = e[i].next){\n    printf(\"Start: %d\\n\", x);\n    printf(\"End: %d\\n\", e[i].to);\n    printf(\"W: %d\", e[i].w);\n    }\n}\nint main(){\n    scanf(\"%d %d\", &amp;n, &amp;m, &amp;x);\n    for(int i = 1; i &lt;= m; i++){\n    int u, v, w; scanf(\"%d %d %d\", &amp;u, &amp;v, &amp;w);\n    add(u, v, w); //\u5efa\u7acb\u6709\u5411\u56fe \u5982\u679c\u5efa\u7acb\u65e0\u5411\u56fe\u52a0\u4e0aadd(v, u, w); \n    } \n    void dfs(x);\n    return 0;\n}\n</code></pre> <p>\u5b8c\u7ed3\u6492\u82b1:.\u2606(~\u25bdbai~)/$:\u00b0\u2605</p>"},{"location":"past/graph/topo/","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"past/graph/topo/#_2","title":"\u95f2\u8c08","text":""},{"location":"past/graph/topo/#_3","title":"\u539f\u56e0","text":"<p>\u5514\uff0c\u4e3a\u4e86NOIP\uff0c\u52a0\u6cb9(*\u00b4\uff9f\u2200\uff9f\uff40)\uff89 </p>"},{"location":"past/graph/topo/#_4","title":"\u80cc\u666f","text":"<p>\u62d3\u6251\u6392\u5e8f\u6211\u7b2c\u4e00\u904d\u5b66\u7684\u65f6\u5019\u5c31\u6a21\u68f1\u4e24\u53ef\u7684\uff0c\u7cca\u5f04\u7cca\u5f04\u8fc7\u53bb\u7684\uff0c\u54b3\u3002\u540e\u6765\u505a\u9898\u7684\u65f6\u5019\u624d\u53d1\u73b0\u7f3a\u70b9\u5565\u90fd\u4e0d\u884c\uffe3\u3078\uffe3\uff0c\u4e8e\u662f\u53c8\u81ea\u5b66\u4e86\u4e00\u904d\uff0c\u5199\u4e00\u7bc7\u535a\u5ba2\u6765\u8ba9\u81ea\u5df1\u66f4\u597d\u7684\u7406\u89e3\u3002</p>"},{"location":"past/graph/topo/#_5","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"past/graph/topo/#_6","title":"\u80cc\u666f","text":"<p>\u6211\u81f3\u4eca\u8fd8\u4e0d\u592a\u6e05\u695a\u4ed6\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540d\u5b57-_-||\uff08\u5e0c\u671b\u6709\u5927\u4f6c\u80fd\u544a\u8bc9\u6211\uff09\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u662f\u7528\u6765\u5e72\u4ec0\u4e48\u7684\uff0c\u4e00\u822c\u5728\u4e00\u4e9b\u5de5\u7a0b\u5f53\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5b8c\u6210\u82e5\u5e72\u4e2a\u5b50\u5de5\u7a0b\u6765\u7ec4\u6210\u5b8c\u6574\u7684\u5de5\u7a0b\uff0c\u4f46\u662f\u8fd9\u4e9b\u5b50\u5de5\u7a0b\u4e4b\u95f4\u5b58\u5728\u7740\u5148\u540e\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u7740\u4f9d\u8d56\u5173\u7cfb\uff0c\u53ea\u6709\u5b8c\u6210\u4e86\u4e00\u4e9b\u5de5\u7a0b\u624d\u80fd\u591f\u5b8c\u6210\u7684\u540e\u9762\u7684\u5de5\u7a0b\uff1b\u8fd9\u65f6\u5019\u6211\u4eec\u7528\u4e00\u4e2a\u6709\u5411\u56fe\u6765\u8868\u793a\u5de5\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5b50\u5de5\u7a0b\u4f5c\u4e3a\u9876\u70b9\uff0c\u6d3b\u52a8\u4e4b\u95f4\u7684\u5148\u540e\u5173\u7cfb\u4e3a\u6709\u5411\u8fb9\uff0c\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u628a\u8fd9\u79cd\u6709\u5411\u56fe\u79f0\u4e3a\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u7684\u7f51\u7edc\uff0c\u53c8\u79f0\u4e3a$AOV$\u7f51\u3002</p>"},{"location":"past/graph/topo/#_7","title":"\u5206\u6790","text":"<p>\u597d\uff0c\u90a3\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u5efa\u7acb\u5728$AOV$\u7f51\u4e0a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\uff1a\u5728$AOV$\u7f51\u4e2d\uff0c\u5982\u679c\u6709\u4e00\u6761\u4ece\u9876\u70b9$Vi$\u5230$Vj$\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bf4$Vi$\u662f$Vj$\u7684\u524d\u9a71\uff0c$Vj$\u662f$Vi$\u7684\u540e\u7eed\u3002\u5982\u679c\u6709\u5f27$(Vi, Vj)$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bf4$Vi$\u662f$Vj$\u7684\u76f4\u63a5\u524d\u9a71\uff0c$Vj$\u662f$Vi$\u7684\u76f4\u63a5\u540e\u7eed\u3002\u8fd9\u4e9b\u5b9a\u4e49\u4e86\u89e3\u4e00\u4e0b\u5c31\u53ef\u4ee5\uff0c\u4e0d\u9700\u8981\u5355\u72ec\u7684\u53bb\u80cc\uff0c\u6700\u91cd\u8981\u7684\u662f\u5b66\u4f1a\u638c\u63e1\u5982\u4f55\u4f7f\u7528\u4ed6\u4eec\u3002\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u53ef\u4ee5\u6c42\u51fa\u8fd9\u4e9b\u9876\u70b9\u5148\u540e\u904d\u5386\u987a\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\u3002 \u62d3\u6251\u6392\u5e8f\u5462\u5c31\u662f\u9996\u5148\u628a$AOV$\u7f51\u4e2d\u7684\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u5982\u679c\u6709\u5f27$(Vi, Vj)$\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u5e8f\u5217\u5f53\u4e2d$Vi$\u5c31\u8981\u5904\u4e8e$Vj$\u7684\u524d\u9762\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\u5728\u4ee3\u7801\u4e2d\u8868\u73b0\u4e3a\u6570\u7ec4\u7684\u5f62\u5f0f\u6765\u5224\u65ad\u8fd9\u4e2a\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\uff0c\u53eb\u505a\u5165\u5ea6\u6307\u7684\u662f\u6307\u5411\u8fd9\u4e2a\u9876\u70b9\u7684\u8fb9\u6709\u591a\u5c11\u4e2a\uff0c\u6bcf\u5f53\u6211\u4eec\u8fdb\u884c\u7a0b\u5e8f\u6bb5\u65f6\u5019\uff0c\u90fd\u662f\u9996\u5148\u5c06\u5165\u5ea6\u4e3a$0$\u7684\u9876\u70b9\u8f93\u51fa\uff0c\u5e76\u4e14\u5c06\u5b83\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e86\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5230\u7684\u662f\u961f\u5217\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u505a\u5230\u53d6\u961f\u5934\u63d2\u5165\u961f\u5217\u79f0\u64cd\u4f5c\u3002 \u6211\u8ba4\u4e3a\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u6b65\uff1a 1\u3001\u4ece\u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a\u5165\u5ea6\u4e3a$0$\u7684\u9876\u70b9\u8f93\u51fa\u3002  2\u3001\u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u53ca\u6240\u6709\u6307\u5411\u7684\u8fb9\uff08\u5373\u4e0e\u4e4b\u76f8\u90bb\u7684\u6240\u6709\u9876\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\uff09\u3002 3\u3001\u53cd\u590d\u6267\u884c\u4e0a\u9762\u4e24\u4e2a\u6b65\u9aa4\uff0c\u76f4\u5230\u6574\u4e2a\u62d3\u6251\u6392\u5e8f\u5b8c\u6210\uff08\u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a$0$\u7684\u70b9\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u73af\u65e0\u89e3\uff09\u3002</p>"},{"location":"past/graph/topo/#_8","title":"\u5177\u4f53\u4f8b\u5b50","text":"<p>\u770b\u4f8b\u5b50\u624d\u662f\u6700\u76f4\u89c2\u7684\u80fd\u591f\u7406\u89e3\u4e00\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u6765\u770b\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\u3002  \u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6709$a\u3001b$\u4e24\u4e2a\u70b9\u7684\u5165\u5ea6\u5747\u4e3a$0$\uff0c\u90a3\u4e48\u6211\u4eec\u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u8f93\u51fa\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9$b$\uff0c\u5e76\u5220\u9664$b$\u9876\u70b9\u53ca\u5176\u6240\u6307\u5411\u7684\u8fb9\u3002  \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230$h$\u7684\u5165\u5ea6\u4e5f\u4e3a$0$\u4e86\uff0c\u6211\u4eec\u518d\u5728\u5b83\u548c$a$\u5f53\u4e2d\u9009\u62e9\u4e00\u4e2a\u5220\u53bb\uff0c\u518d\u8fdb\u884c\u4e0a\u9762\u7684\u6b65\u9aa4\u76f4\u81f3\u6240\u6709\u9876\u70b9\u5747\u88ab\u5220\u9664\u3002</p>"},{"location":"past/graph/topo/#_9","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include&lt;queue&gt;\n#include&lt;vector&gt;\n#include&lt;cstdio&gt;\n#define N 10010\nusing namespace std;\nint n, m, cnt = 0;\nint head[N], in[N];\nqueue&lt;int&gt; q;\nvector&lt;int&gt; qq;\nstruct edge{\n    int next, to;\n}e[N &lt;&lt; 1];\nvoid add(int u, int v){\n    e[++cnt].next = head[u];\n    e[cnt].to = v;\n    head[u] = cnt;\n}\nvoid sort(){\n    int tot = 0;\n    for(int i = 1; i &lt;= n; i++)\n        if(in[i] == 0) q.push(i), qq.push_back(i);\n    while(!q.empty()){\n        int u = q.front();\n        q.pop();\n        for(int i = head[u]; i; i = e[i].next){\n            int v = e[u].to;\n            in[v]--;      //\u5c06\u8fde\u63a5\u5165\u5ea6\u51cf\u4e00\n            if(in[v] == 0){      //\u5982\u679c\u5165\u5ea6\u4e3a0\u90a3\u4e48\u5c31\u8f93\u51fa\n                q.push(v);\n                qq.push_back(v);\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d %d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= m; i++){\n        int u, v; scanf(\"%d %d\", &amp;u, &amp;v);\n        add(u, v); \n        in[v]++; //\u8fd9\u5c31\u662f\u7528\u6765\u8bb0\u5f55\u5165\u5ea6\u7684 \n    }\n    sort();\n    for(int i = 0; i &lt; qq.size(); i++)\n        printf(\"%d \", qq[i]);\n    return 0;\n}\n</code></pre> <p>\u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/graph/topo/#_10","title":"\u5509\uff0c\u8fd8\u662f\u8d25\u7ed9\u4e86\u4e60\u60ef\uff1f\u8fd8\u662f\u653e\u4e0d\u4e0b","text":""},{"location":"past/misc/STL/","title":"STL","text":"<p>\u672c\u7bc7\u53ea\u662f\u4e00\u4e2a\u4f5c\u4e3aOI\u9009\u624b\u7ecf\u5e38\u4f7f\u7528\u7684$STL$\u6a21\u677f\u4e2d\u7684\u96c6\u5408\uff0c\u968f\u65f6\u4fdd\u6301\u66f4\u65b0\u3002</p>"},{"location":"past/misc/STL/#1vector","title":"$1\u3001vector$","text":"<p>\u5b83\u662f\u4e00\u4e2a\u5411\u91cf\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u5bb9\u7eb3\u5f88\u591a\u7c7b\u578b\u7684\u6570\u636e\uff0c\u79f0\u4e3a\u5bb9\u5668\u3002</p>"},{"location":"past/misc/STL/#_1","title":"\u6240\u9700\u5934\u6587\u4ef6","text":"<pre><code>#include&lt;vector&gt;\n</code></pre>"},{"location":"past/misc/STL/#_2","title":"\u521d\u59cb\u5316","text":"<pre><code>vector&lt;int&gt; v;  //\u4e00\u7ef4\nvector&lt;int&gt; v[N];  //\u4e8c\u7ef4\nvector&lt;string int&gt; v[N]; //\u4e0d\u540c\u7684\u4e8c\u7ef4\u8868\u8fbe\u5f62\u5f0f\n</code></pre>"},{"location":"past/misc/STL/#_3","title":"\u64cd\u4f5c","text":"<p>\u8fd4\u56dev\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20</p> <pre><code>v.front();  \n</code></pre> <p>\u6e05\u7a7av</p> <pre><code>v.clear();  \n</code></pre> <p>\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c \u7a7a\u8fd4\u56de$flase$\uff0c \u4e0d\u7a7a\u8fd4\u56de$true$</p> <pre><code>v.empty();  \n</code></pre> <p>\u5728\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20$x$</p> <pre><code>v.push_back(x);  \n</code></pre> <p>\u5220\u9664$v$\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20</p> <pre><code>v.pop_back();\n</code></pre> <p>\u5220\u9664$v$\u4e2d\u7684\u7b2c$n$\u4e2a\u5230\u7b2c$m$\u4e2a\u5143\u7d20</p> <pre><code>v.erase(v.begin() + n, v.begin() + m);  \n</code></pre> <p>\u5728$v$\u7684\u7b2c$n$\u4e2a\u5143\u7d20\u4f4d\u7f6e\u63d2\u5165\u6570\u503c$x$</p> <pre><code>v.insert(v.begin() + n, x);\n</code></pre> <p>\u5728$v$\u7684\u7b2c$n$\u4e2a\u849c\u7d20\u4f4d\u7f6e\u63d2\u5165$x$\u4e2a\u6570\u503c\u4e3a$y$\u7684\u6570</p> <pre><code>v.insert(v.begin() + n, x, y);\n</code></pre> <p>\u8fd4\u56de$v$\u4e2d\u5143\u7d20\u7684\u4e2a\u6570</p> <pre><code>v.size();  \n</code></pre> <p>\u5faa\u73af\u6dfb\u52a0\u5143\u7d20</p> <pre><code>for(int i = 1; i &lt;= n; i++)\n      v.push_back(i);\n</code></pre>"},{"location":"past/misc/STL/#2queue","title":"$2\u3001queue$","text":"<p>$queue$\u4e3a\u961f\u5217\uff0c\u5b83\u7684\u6a21\u677f\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u6765\u6539\u53d8\u5bb9\u5668\u7c7b\u578b\u3002\u5b83\u662f\u5148\u8fdb\u5148\u51fa\u7684\u3002</p>"},{"location":"past/misc/STL/#_4","title":"\u6240\u9700\u5934\u6587\u4ef6","text":"<pre><code>#include&lt;queue&gt;\n</code></pre>"},{"location":"past/misc/STL/#_5","title":"\u521d\u59cb\u5316","text":"<pre><code>queue&lt;int&gt; q;\n</code></pre>"},{"location":"past/misc/STL/#_6","title":"\u64cd\u4f5c","text":"<p>\u8fd4\u56de$q$\u4e2d\u5143\u7d20\u7684\u4e2a\u6570</p> <pre><code>q.size();  \n</code></pre> <p>\u5411$q$\u7684\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20$x$</p> <pre><code>q.push(x);  \n</code></pre> <p>\u8fd4\u56de$q$\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20</p> <pre><code>q.back();  \n</code></pre> <p>\u8fd4\u56de$q$\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20</p> <pre><code>q.front();  \n</code></pre> <p>\u5224\u65ad$q$\u662f\u5426\u4e3a\u7a7a\uff0c \u7a7a\u8fd4\u56de$flase$\uff0c \u4e0d\u7a7a\u8fd4\u56de$true$</p> <pre><code>q.empty();  \n</code></pre> <p>\u5220\u9664$q$\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20</p> <pre><code>q.pop();  \n</code></pre> <p>\u5728\u6bd4\u8d5b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u7528$queue$\u5b9e\u73b0\u53e6\u4e00\u79cd\u53eb\u505a\u4f18\u5148\u961f\u5217\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u597d\u5904\u662f\u53ef\u4ee5\u6309\u7167\u8981\u6c42\u81ea\u52a8\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6216\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002</p> <pre><code>priority_queue&lt;Type, Container, Functional&gt;\n</code></pre> <p>$Type$ \u5c31\u662f\u6570\u636e\u7c7b\u578b\uff0c$Container$ \u5c31\u662f\u5bb9\u5668\u7c7b\u578b\uff08$Container$\u5fc5\u987b\u662f\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u5bb9\u5668\uff0c\u6bd4\u5982$vector$,$deque$\u7b49\u7b49\uff0c\u4f46\u4e0d\u80fd\u7528 $list$\u3002$STL$\u91cc\u9762\u9ed8\u8ba4\u7528\u7684\u662f$vector$\uff09\uff0c$Functional$ \u5c31\u662f\u6bd4\u8f83\u7684\u65b9\u5f0f\uff0c\u5f53\u9700\u8981\u7528\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u65f6\u624d\u9700\u8981\u4f20\u5165\u8fd9\u4e09\u4e2a\u53c2\u6570\uff0c\u4f7f\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u53ea\u9700\u8981\u4f20\u5165\u6570\u636e\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f\u5927\u9876\u5806 \u4e00\u822c\u6211\u4eec\u662f\u8fd9\u6837\u4f7f\u7528\u7684\u3002</p> <pre><code>//\u5347\u5e8f\u961f\u5217\npriority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;\n//\u964d\u5e8f\u961f\u5217\npriority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;q;\n//\u5982\u679c\u53ea\u60f3\u8981\u5347\u5e8f\u7684\u8bdd\u8fd9\u6837\u9ed8\u8ba4\u7684\u5373\u53ef\npriority_queue&lt;int&gt; a; \n</code></pre> <p>\u5176\u4ed6\u7684\u64cd\u4f5c\u540c\u4e0a</p>"},{"location":"past/misc/basic/","title":"Basic","text":"<p>\u4f5c\u4e3a\u4e00\u540d\u6765\u81ea\u5f31\u7701\u7684\u849f\u84bb\uff0c\u9762\u5bf9\u5373\u5c06\u5230\u6765\u7684NOIP\uff0c\u552f\u4e00\u80fd\u505a\u7684\u5c31\u662f\u7948\u7977\uff08\u5212\u53bb\uff09\uff0c\u5c31\u662f\u5237\u9898\uff0c\u672c\u849f\u84bb\u7684\u613f\u671b\u5c31\u662f\u4e89\u53d6T1T2\u4e0d\u4e22\u5206\uff0cT3T4\u5c31\u542c\u5929\u7531\u547d\u770b\u4eba\u54c1\u4e86\uff08rp++)\u3002\u5237\u4e86\u4e00\u4e9b\u524d\u51e0\u5e74\u7684\u9898\u76ee\uff0c\u611f\u89c9\u524d\u4e24\u9053\u9898\u7684\u4e00\u4e9b\u5176\u5b9e\u662f\u5b58\u5728\u4e00\u4e9b\u89e3\u9898\u60f3\u6cd5\u7684\uff0c\u672c\u849f\u84bb\u5c31\u60f3\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u6bb5\u65f6\u95f4\u81ea\u5df1\u7684\u5fc3\u5f97\u3002 1. https://www.luogu.com.cn/problem/CF23B    \u8fd9\u9053\u9898\u4e00\u773c\u7785\u8fc7\u53bb\u6211\u5176\u5b9e\u662f\u6709\u70b9\u8499\u7684(\u751a\u81f3\u9898\u76ee\u90fd\u6709\u70b9\u6ca1\u8bfb\u61c2)\uff0c\u8bfb\u4e86\u51e0\u6b21\u540e\u660e\u767d\u4e86\u5c31\u662f\u4ece\u5ea6\u6570\u4e3a0\u7684\u70b9\u5f00\u59cb\u5220\u53bb\u8fd9\u4e2a\u70b9\uff0c\u540c\u65f6\u5c06\u8fde\u7740\u8fd9\u4e2a\u70b9\u7684\u8fb9\u4e0a\u7684\u53e6\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u51cf\u4e00\uff0c\u5e76\u4e14\u4e0b\u6b21\u5220\u53bb\u5ea6\u6570\u4e3a1\u518d\u51cf\u8fde\u63a5\u7684\u5ea6\u6570\uff0c\u5e76\u8fd9\u4e48\u5ef6\u7eed\u5230n-1\u4e3a\u6b62\u3002\u8fd9\u4e48\u542c\u8d77\u6765\u8fd8\u662f\u5f88\u62bd\u8c61\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u4ece\u5c11\u5f00\u59cb\u5217\u4e3e\uff0c\u9996\u5148\u6211\u9009\u62e9\u4ecen = 4\u5f00\u59cb\u5206\u6790\uff0c\u4e0a\u56fe\u3002!\uff08\u8bf7\u539f\u8c05\u6211\u7c97\u7cd9\u7684\u753b\u5de5\uff09    \u90a3\u4e48\u6211\u4eec\u60f3\u60f3\u600e\u6837\u624d\u80fd\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u4e0d\u88ab\u70b9\u5230\uff0c\u9996\u5148\u6211\u4eec\u5982\u679c\u5c06\u6240\u6709\u7684\u70b9\u90fd\u8fde\u5728\u4e00\u8d77\u3002  \uff08\u80fd\u7528\u4e0acs\u4e86\u5c31\u662f\u723d\uff09    \u6b64\u65f6\u5f88\u660e\u663e\u6240\u6709\u4eba\u7684\u670b\u53cb\u6570\u90fd\u662f3\uff0c\u5168\u90e8\u4f1a\u88ab\u70b9\u8d70\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u679c\u5c06\u4efb\u610f\u4e00\u4e2a\u5173\u7cfb\u53bb\u6389\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u4eba\u5c31\u4f1a\u56e0\u4e3a\u5f7c\u6b64\u4e0d\u662f\u670b\u53cb\u4e86\uff0c\u670b\u53cb\u6570\u76ee\u51cf\u5c11\u4e86\u4e00\u4e2a\uff0c\u800c\u5176\u4f59\u76842\u4e2a\u4eba\u4ecd\u7136\u662f\u539f\u5148\u7684\u670b\u53cb\u6570\u76ee\uff0c\u8fd9\u91cc\u9762\u6211\u4eec\u5047\u8bbe\u5c061\u548c4\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u53bb\u6389\u3002  \u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b01\u548c4\u7684\u670b\u53cb\u6570\u4e3a2,2\u548c3\u7684\u670b\u53cb\u6570\u4ecd\u7136\u4e3a3\uff0c\u90a3\u4e48\u5f53\u53bb\u6389\u670b\u53cb\u6570\u4e3a2\u7684\u4eba\u65f6\uff0c1\u548c4\u4fbf\u79bb\u5f00\uff0c2\u548c3\u56e0\u4e3a\u548c1\u30014\u90fd\u662f\u670b\u53cb\uff0c\u670b\u53cb\u6570\u53d8\u6210\u4e861\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u6700\u5927\u503c\u5373\u4e3a2\u3002\u6211\u4eec\u4fbf\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u6240\u6709\u7684\u4eba\u6392\u6210\u4e00\u6392\uff0c\u4e24\u8fb9\u7684\u4e24\u4e2a\u4eba\u90fd\u4e0d\u8ddf\u5bf9\u65b9\u76f8\u8fde\uff0c\u800c\u4e2d\u95f4\u7684\u5176\u4ed6\u4eba\u4e0e\u975e\u81ea\u5df1\u7684\u6240\u6709\u4eba\u76f8\u8fde\uff0c\u90a3\u4e48\u6b64\u65f6\u53ea\u4f1a\u8ba9\u4e24\u8fb9\u7684\u4e24\u4e2a\u4eba\u79bb\u5f00\uff0c\u800c\u4e2d\u95f4\u5269\u4e0b\u7684\u4eba\u6570\u65e2\u4e3a\u5269\u4f59\u7684\u6700\u5927\u4eba\u6570\u3002\u5728\u8fd9\u91cc\u6211\u753b\u4e00\u4e2an = 6\u65f6\u7684\u60c5\u666f\u3002 \uff08\u5f3a\u8feb\u75c7\u72b6\u60a3\u8005\u8868\u793a\u5f88\u6de6\uff09    \u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7ed3\u8bba\u662f\u6210\u7acb\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a8\u5e7f\u5230\u4e4b\u540e\u7684\u4eba\u6570\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4eba\u6570\u4e3a1\u62162\u65f6\uff0c\u6b64\u65f6\u4e00\u5b9a\u4e0d\u4f1a\u5269\u4e0b\u4efb\u4f55\u4e00\u4e2a\u4eba\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u51fa\u3002 $$ ans=\\left{ \\begin{aligned} 0,     0 \\leq n \\leqslant 2 \\ n - 2, n \\geq 2 \\end{aligned} \\right. $$ \u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u7686\u5927\u6b22\u559c\u7684\u4e0a\u4ee3\u7801\u3002</p> Code\uff08\u70b9\u51fb\u6253\u5f00\uff09 <pre><code>\n#include\nusing namespace std;\nint n,t;\nint main(){\n    cin &gt;&gt; t;\n    while(t--){\n        cin &gt;&gt; n;\n        if(n == 1) cout &lt;&lt; 0 &lt;&lt; endl;\n        else if(n == 2) cout &lt;&lt; 0 &lt;&lt; endl;\n        else cout &lt;&lt; n - 2 &lt;&lt; endl;\n    }\n    return 0;\n}\n\n\n<p>\u7ee7\u7eed\u4e0b\u4e00\u9898~\n2.https://www.luogu.com.cn/problem/CF437C\n\u8fd9\u9053\u9898\u7684\u610f\u56fe\u5c31\u5f88\u660e\u663e\u4e86\uff0c\u7531\u4e8e\u5220\u9664\u7684\u662f\u70b9\u6743\uff0c\u5e76\u4e14\u662f\u8981\u6c42\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6211\u6700\u5f00\u59cb\u60f3\u5230\u7684\u4fbf\u662f\u8d2a\u5fc3\uff0c\u518d\u4e00\u60f3\uff0c\u5220\u70b9\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4ece\u5220\u8fb9\u7684\u89d2\u5ea6\u6765\u601d\u8003\uff0c\u6211\u4eec\u4e00\u5171\u9700\u8981\u5220\u9664\u7684\u662fn - 1\u6761\u8fb9\uff0c\u90a3\u4e48\u4fbf\u5c06\u6bcf\u6761\u8fb9\u90fd\u904d\u5386\u4e00\u904d\uff0c\u4ee3\u4ef7\u589e\u52a0\u8fd9\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e2d\u7684\u70b9\u6743\u5c0f\u7684\u70b9\u6743\uff0c\u975e\u5e38\u7b80\u5355\u3002</p>\n\nCode\n<pre><code>\n#include\n#include\nusing namespace std;\nint n,m,a[10010];\nlong long ans;\nint main(){\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for(int i = 1; i &lt;= m; i++){\n        int x,y; cin &gt;&gt; x &gt;&gt; y;\n        ans += min(a[x], a[y]);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n\n\n<p>3.https://www.luogu.com.cn/problem/CF61D\n   \u55ef\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u9053\u9898\u7684\u9898\u9762\uff0c\u63d0\u5230n\u4e2a\u57ce\u5e02\uff0c\u4f46\u662f\u53ea\u6709n - 1\u6761\u8fb9\uff0c\u5e76\u4e14\u4e24\u4e2a\u70b9\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u53cc\u5411\u901a\u9053\uff0c\u90a3\u4e48\u5f88\u660e\u663e\uff0c\u8fd9\u9053\u9898\u5e94\u8be5\u662f\u6811\u4e0a\u7684\u95ee\u9898\u3002\u90a3\u4e48\u6839\u636e\u9898\u610f\uff0c\u5f53\u5728\u6811\u4e0a\u7684\u4e00\u70b9\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u9009\u62e9\u4ed6\u6240\u8fde\u63a5\u7684\u4e00\u6761\u8def\u8d70\uff0c\u7136\u540e\u518d\u8fd4\u56de\u90a3\u4e48\u9009\u62e9\u7684\u8fb9\u4fbf\u4f1a\u6e38\u5386\u4e24\u6b21\uff0c\u4f46\u662f\u4f1a\u6709\u4e00\u6761\u8def\u5f84\u662f\u53ea\u8d70\u4e00\u6b21\u7684\uff0c\u60f3\u8981\u6c42\u51fa\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u5e94\u8be5\u8ba9\u6811\u4e2d\u6700\u957f\u7684\u4e00\u6761\u94fe\u76f4\u8d70\u4e00\u6b21\uff0c\u5176\u4ed6\u7684\u8fb9\u8d70\u4e24\u6b21\u4fbf\u53ef\u4ee5\u5f97\u51fa\u6b63\u786e\u7b54\u6848\uff0c\u6240\u4ee5\u4fbf\u662f\u6811\u7684\u603b\u8def\u5f84\u4e58\u4ee52\u518d\u51cf\u53bb\u6700\u957f\u7684\u4e00\u6761\u94fe\u7684\u957f\u5ea6\u4fbf\u53ef\u3002</p>\n\nCode\n<pre><code>\n#include\n#include\ndefine ll long long \nusing namespace std;\nint cnt,head[100010];\nll ans = 0,len = -1,n;\nstruct edge{\n    int to,next,dis;\n}edge[100010 &lt;&lt; 1];\nvoid add(int x, int y, int t){\n    edge[++cnt].to = y;\n    edge[cnt].next = head[x];\n    edge[cnt].dis = t;\n    head[x] = cnt;\n}\nvoid dfs(int x, int y, ll now){\n    len=max(len, now);\n    for(int i = head[x]; i; i = edge[i].next){\n        int v = edge[i].to,d = edge[i].dis;\n        if(v == y) continue;\n        dfs(v, x, now + d);\n    }\n    return ;\n}\nint main(){\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n - 1; i++){\n        int x,y,w; cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        add(x, y, w); add(y, x, w);\n        ans += w;\n    }\n    ans *= 2;\n    dfs(1, 0, 0);\n    cout &lt;&lt; ans - len &lt;&lt; endl;\n    return 0;\n}"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/","title":"\u5feb\u901f\u5e42","text":""},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_2","title":"\u95f2\u626f","text":"<p>\u672c\u849f\u84bb\u6570\u5b66\u4e0d\u597d(\u2022 \u0300\u03c9\u2022\u0301 )\u2727\uff0c\u60f3\u5199\u4e00\u7bc7\u5feb\u901f\u5e42\u7684\u9898\u89e3\u8ba9\u81ea\u5df1\u5bf9\u5176\u7684\u4e86\u89e3\u66f4\u52a0\u6df1\u5165\u3002</p>"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_3","title":"\u7b97\u6cd5","text":""},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_4","title":"\u9898\u9762","text":"<p>\u6d1b\u8c37P1226\u5feb\u901f\u5e42</p>"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_5","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e09\u4e2a\u6574\u6570$b, p, k$\u6c42 $b ^ p \\mod k$ </p>"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_6","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e09\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868$b, p, k$</p>"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_7","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32$b ^ p \\mod k = s$ \uff0c\u5176\u4e2d$b, p, k$\u5206\u522b\u4e3a\u9898\u76ee\u7ed9\u5b9a\u7684\u503c\uff0c$s$\u4e3a\u8fd0\u7b97\u7ed3\u679c\u3002</p>"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_8","title":"\u7b97\u6cd5","text":"<p>\u6211\u4eec\u5728\u8fdb\u884c\u5e42\u8fd0\u7b97\u7684\u65f6\u5019\u5c06$a$\u81ea\u4e58\u4e00\u6b21\u5f97\u5230$a ^ 2$\uff0c\u518d\u628a$a ^ 2$\u81ea\u4e58\u4e00\u6b21\u53d8\u4e3a$a ^ 4$\uff0c\u63a5\u4e0b\u6765$a ^ 8$\u2026\u2026\uff0c\u81ea\u4e58$n$\u6b21\u540e\u5c31\u53d8\u4e3a\u4e86$a ^ {2n}$\uff0c\u5e42\u8fd0\u7b97\u8fd8\u6709\u8fd9\u6837\u7684\u4e00\u79cd\u539f\u7406$a ^ xa ^ y = a^{x + y}$\u3002\u6700\u91cd\u8981\u7684\u662f\u4e0b\u4e00\u70b9\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u7684\u662f$a ^ b$\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c06$b$\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u770b\u4e00\u4e0b\uff0c\u5047\u8bbe$b = (39)_10$\u7b49\u540c\u4e8e$b = (100111)_2$\uff0c\u8fd9\u4e9b$1$\u5206\u522b\u4ee3\u8868\u5341\u8fdb\u5236\u4e2d\u7684$32\uff0c 4\uff0c 2\uff0c 1$\uff0c\u90a3\u4e48$a ^ {39} = a ^ {32} \\times a ^ 4 \\times a ^ 2 \\times a ^ 1$\u3002\u8fd9\u6837\u6765\u8868\u793a\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u5230$O(log_2n)$\u3002 \u90a3\u4e48\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u521d\u59cb\u503c$base = a$\u548c$ans = 1$\u6765\u8bb0\u5f55\u7ed3\u679c\u3002\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a$while(b &gt; 0)$\u7684\u5faa\u73af\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u5f53$b$\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u7b2c$i$\u4f4d\u5982\u679c\u4e3a$1$\u90a3\u4e48\u7684\u8bdd$ans = base;$\u5982\u679c\u4e3a$0$\u7684\u8bdd\u5219\u7ee7\u7eed\uff0c\u540c\u65f6\u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\u90fd\u8981$base = 2$\u4f7f\u4ed6\u81ea\u5df1\u53d8\u6210\u5e73\u65b9\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u6765\u5224\u65ad\u7b2c$i$\u4f4d\u5230\u7b2c\u662f\u4ec0\u4e48\u8868\u793a\u4e3a$if(b$ &amp; $i)$,&amp;\u4e3a\u6309\u4f4d\u4e0e\u7684\u610f\u601d\uff0c\u5373\u4e3a\u5f53\u4e24\u8005\u90fd\u662f$1$\u7684\u65f6\u5019\u624d\u4f1a\u8fd4\u56de$1$\u5426\u5219\u8fd4\u56de$0$\uff0c\u975e\u5e38\u7684\u5de7\u5999\uff1b\u540c\u65f6$b &gt;&gt;= 1$\u8fd9\u4e2a\u610f\u601d\u662f$b$\u5728\u4e8c\u8fdb\u5236\u7684\u8868\u793a\u4e0b\u5411\u53f3\u79fb\u4e00\u4f4d\uff0c$(100111)_2 &lt;&lt;= (10011)_2$\u8fd9\u6837\u8fdb\u884c\u64cd\u4f5c\u76f4\u5230$b$\u53d8\u4e3a$0$\u3002\u540c\u65f6\u6ce8\u610f\u9700\u8981\u5728\u6bcf\u4e00\u6b65\u8fdb\u884c\u7684\u540c\u65f6$/mod k$\uff0c\u8fd9\u6837\u624d\u4e0d\u4f1a\u4f7f\u7b54\u6848\u6ea2\u51fa\u3002</p>"},{"location":"past/numtry/%E5%BF%AB%E9%80%9F%E5%B9%82/#_9","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nlong long b,q,k;\nlong long quickpower(long long a,long long b){\n    long long ans=1,base=a;\n    while(b &gt; 0){\n        if(b &amp; 1) ans=ans*base%k;\n        base=base*base%k;\n        b &gt;&gt;=1;\n    }\n    return ans;\n}\n\nint main(){\n    cin&gt;&gt;b&gt;&gt;q&gt;&gt;k;\n    int ans=quickpower(b,q);\n    printf(\"%lld^%lld mod %lld=%lld\",b,q,k,ans%k);\n    return 0;\n}\n</code></pre> <p>\u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/","title":"\u8d28\u6570\u7b5b","text":""},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_2","title":"\u95f2\u8c08","text":""},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_3","title":"\u539f\u56e0","text":"<p>\u829c\u6e56\uff0c\u849f\u84bb\u7684\u7b2c\u5341\u7bc7\u535a\u5ba2\u3002\uff08$NOIP$\u52a0\u6cb9\uff01\uff01\uff01\uff09</p>"},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_4","title":"\u80cc\u666f","text":"<p>\u4e4b\u524d\u4e00\u76f4\u5f88\u60f3\u5b66\u4e60\u8fd9\u91cc\u4f46\u662f\u6ca1\u6709\u62bd\u51fa\u65f6\u95f4\uff0c\u4eca\u5929\u8eab\u4f53\u4e0d\u9002\u5f85\u5728\u5bb6\u4e2d\uff0c\u5c31\u8d81\u673a\u5b66\u4e60\u4e86\u4e00\u4e0b\u3002</p>"},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_5","title":"\u8d28\u6570\u7b5b","text":""},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_6","title":"\u80cc\u666f","text":"<p>\u6211\u4eec\u5728\u4fe1\u606f\u7ade\u8d5b\u7684\u9898\u76ee\u5f53\u4e2d\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u770b\u5230\u548c\u8d28\u6570\u76f8\u5173\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5982\u679c\u7528\u4f20\u7edf\u7684\u904d\u5386\u6cd5\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\sqrt{n})$\uff0c\u5e76\u4e14\u4e00\u6b21\u53ea\u80fd\u6c42\u89e3\u4e00\u4e2a\u3002</p> <pre><code>bool isprime(int n){\n    for(int i = 2;i &lt;= sqrt(n); i++)\n        if(n % i == 0) return false;\n    return true;\n}\n</code></pre> <p>\u4f46\u6211\u4eec\u5f80\u5f80\u4f1a\u9047\u5230\u6c42\u89e3\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u8d28\u6570\u603b\u6570\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019\u5f80\u5f80\u4f1a\u9020\u6210\u592a\u5927\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8d28\u6570\u7b5b\u5c31\u662f\u4e00\u79cd\u53ef\u4ee5\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u4e3a\u7ebf\u6027\u7684\u4f18\u79c0\u65b9\u6cd5\u3002</p>"},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_7","title":"\u7406\u89e3","text":"<p>\u9996\u5148\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u4ec0\u4e48\u53eb\u505a\u8d28\u6570\u7b5b\uff0c\u9996\u5148\u6211\u4eec\u5f00\u4e00\u4e2a$bool$\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5c06\u5b83\u7684\u5927\u5c0f\u5b9a\u4e49\u4e3a\u6211\u4eec\u6240\u9700\u8981\u6c42\u8303\u56f4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5e76\u5c06\u5b83\u4eec\u90fd\u8d4b\u503c\u4e3a\u771f$is_prime[maxn] = true;$\uff0c\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5982\u679c\u4e3a$true$\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u6570\u4e3a\u8d28\u6570\uff0c\u5982\u679c\u4e3a$false$\u90a3\u4e48\u8bf4\u660e\u4fbf\u4e0d\u4e3a\u8d28\u6570\uff0c\u5982\u4f55\u5c06\u5408\u6570\u627e\u51fa\u6765\u4fbf\u975e\u5e38\u7684\u5173\u952e\u4e86\u3002</p>"},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_8","title":"\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","text":"<p>\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u9996\u5148\u4ece$1$\u5f00\u59cb\uff0c$1$\u65e2\u4e0d\u662f\u8d28\u6570\u4e5f\u4e0d\u662f\u5408\u6570\uff0c\u6240\u4ee5\u6807\u8bb0\u4e3a$false$\uff1b\u63a5\u7740\u662f$2$\uff0c$2$\u662f\u8d28\u6570\uff0c\u4fbf\u6807\u8bb0\u4e3a$true$\uff0c\u6ce8\u610f\u5c06$2$\u5230$maxn$\u4e2d\u6240\u6709\u80fd\u88ab$2$\u6574\u9664\u7684\u6570\u90fd\u6807\u8bb0\u4e3a$false$\uff1b\u63a5\u7740\u662f$3$\uff0c\u6807\u8bb0\u4e3a$true$\uff0c\u5c06\u5230$maxn$\u80fd\u88ab$3$\u6574\u9664\u7684\u6570\u6807\u8bb0\u4e3a$false$\uff1b\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53d1\u73b0$4$\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a$false$\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8df3\u8fc7\u5b83\uff0c\u5c06\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\u7684$5$\u6807\u8bb0\u4e3a$true$\uff0c\u5c06\u5230$maxn$\u80fd\u88ab$5$\u6574\u9664\u7684\u6570\u6807\u8bb0\u4e3a$false$\uff1b\u5e76\u4e00\u76f4\u505a\u4e0b\u53bb\uff0c\u5c31\u4f1a\u628a\u4e0d\u8d85\u8fc7$false$\u7684\u5408\u6570\u5168\u90e8\u6807\u8bb0\u4e3a$0$\uff0c\u4e0d\u8d85\u8fc7$maxn$\u7684\u8d28\u6570\u5168\u90e8\u6807\u8bb0\u4e3a$true$\u3002\u56e0\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u6700\u5f00\u59cb\u662f\u5e0c\u814a\u4eba\u662f\u628a\u6570\u5199\u5728\u6d82\u814a\u7684\u677f\u4e0a\uff0c\u6bcf\u8981\u5212\u53bb\u4e00\u4e2a\u6570\uff0c\u5c31\u5728\u4e0a\u9762\u8bb0\u4ee5\u5c0f\u70b9\uff0c\u5bfb\u6c42\u8d28\u6570\u7684\u5de5\u4f5c\u5b8c\u6bd5\u540e\uff0c\u8fd9\u8bb8\u591a\u5c0f\u70b9\u5c31\u50cf\u4e00\u4e2a\u7b5b\u5b50\uff0c\u5e76\u4e14\u662f\u7531\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u53d1\u660e\u7684\uff0c\u6240\u4ee5\u53eb\u505a\u201c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u201d\uff0c\u7b80\u79f0\u201c\u7b5b\u6cd5\u201d\u3002</p> <pre><code>int prime[MAXN];      //\u7d20\u6570\u6570\u7ec4\nbool isprime[MAXN + 10];      //is_prime[i]\u8868\u793ai\u662f\u7d20\u6570\n//\u8fd4\u56den\u4ee5\u5185\u7d20\u6570\u7684\u4e2a\u6570\nint solve(int n){\n    int p = 0;      //\u7d20\u6570\u4e2a\u6570\u8ba1\u6570\u5668\n    for (int i = 0; i &lt;= n; i++)\n        is_prime[i] = true;\n    is_prime[0] = is_pri[1] = false;      //\u9996\u5148\u6807\u8bb00\u548c1\u4e0d\u662f\u7d20\u6570\n    for (int i = 2; i &lt;= n; i++){\n        if (is_prime[i]){      //\u5982\u679ci\u662f\u7d20\u6570\n            prime[++p] = i;      //\u5c06\u7d20\u6570\u653e\u8fdb\u7d20\u6570\u8868\n            for (int j = 2 * i; j &lt;= n; j += i)      //\u6240\u6709i\u7684\u500d\u6570\u90fd\u4e0d\u662f\u7d20\u6570\n                is_prime[j] = false;\n        }\n    }\n    return p;\n}\n</code></pre> <p>\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4f8b\u5982$6$\u8fd9\u4e2a\u6570\u5b57\uff0c\u4f1a\u88ab$2$\u548c$3$\u91cd\u590d\u7b5b\u53bb\u4e00\u904d\uff0c\u4f1a\u9020\u6210\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlognlogn)$\u6240\u4ee5\u6211\u4eec\u5c06\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884c\u4e86\u6539\u8fdb\u3002</p>"},{"location":"past/numtry/%E8%B4%A8%E6%95%B0%E7%AD%9B/#_9","title":"\u6b27\u62c9\u7b5b","text":"<p>\u6b27\u62c9\u7b5b\u7684\u6838\u5fc3\u662f\uff1a\u8ba9\u6bcf\u4e00\u4e2a\u5408\u6570\u88ab\u6700\u5c0f\u8d28\u56e0\u6570\u7b5b\u53bb\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 $$\\large{2\\quad3\\quad4\\quad5\\quad6\\quad7\\quad8\\quad9\\quad10\\quad11\\quad12\\quad13\\quad14\\quad15\\quad16}$$ $$primes:() $$ \u8fd9\u6b21\u6211\u4eec\u8fd8\u8fd0\u7528\u4e86\u4e00\u4e2a$\u8d28\u6570\u8868$prime[maxn]$\u6765\u7ef4\u62a4\uff0c\u9996\u5148\u628a$2$\u628a\u5b83\u52a0\u5165\u5230\u8d28\u6570\u8868\u5f53\u4e2d\uff0c\u5e76\u5728\u539f\u6570\u7ec4\u4e2d\u5220\u9664\uff1b $$\\large{\\color{blue}2\\quad3\\quad4\\quad5\\quad6\\quad7\\quad8\\quad9\\quad10\\quad11\\quad12\\quad13\\quad14\\quad15\\quad16}$$ $$primes:(2) $$ \u5e76\u4e14\u7528$2$\u6765\u4e58\u8d28\u6570\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u8fd9\u91cc\u53ea\u6709$2$\uff0c\u6240\u4ee5\u5f97\u51fa\u7684\u662f$4$\uff0c\u6240\u4ee5\u6211\u4eec\u5c06$4$\u5728\u539f\u6570\u7ec4\u4e2d\u5212\u53bb\uff1b $$\\large{\\color{blue}2\\quad3\\quad\\color{red}4\\quad5\\quad6\\quad7\\quad8\\quad9\\quad10\\quad11\\quad12\\quad13\\quad14\\quad15\\quad16}$$ $$primes:(2) $$ \u63a5\u4e0b\u6765\u662f$3$\uff0c\u6211\u4eec\u4e5f\u540c\u6837\u5c06 \u5b83\u52a0\u5165\u5230\u8d28\u6570\u8868\u4e2d\uff0c\u5e76\u5728\u539f\u6570\u7ec4\u4e2d\u5220\u9664\uff1b $$\\large{\\color{blue}2\\quad\\color{blue}3\\quad\\color{red}4\\quad5\\quad6\\quad7\\quad8\\quad9\\quad10\\quad11\\quad12\\quad13\\quad14\\quad15\\quad16}$$ $$primes:(2, 3) $$ \u540c\u65f6\u4e0e\u8d28\u6570\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u76f8\u4e58\uff0c\u5f97\u5230$6$\u548c$9$\uff0c\u5c06\u5b83\u4eec\u5212\u6389\uff1b $$\\large{\\color{blue}2\\quad\\color{blue}3\\quad\\color{red}4\\quad5\\quad\\color{red}6\\quad7\\quad8\\quad\\color{red}9\\quad10\\quad11\\quad12\\quad13\\quad14\\quad15\\quad16}$$ $$primes:(2, 3) $$ \u63a5\u4e0b\u6765\u662f$4$\uff08\u6ce8\u610f$4$\u4e5f\u662f\u9700\u8981\u904d\u5386\u7684\uff0c\u53ea\u662f\u4e0d\u52a0\u5165\u5230\u8d28\u6570\u8868\u5f53\u4e2d\u800c\u5df2\uff09\uff0c\u6211\u4eec\u5212\u6389$8$\uff0c\u4f46\u662f\u4e0d\u5212\u6389$12$\uff0c\u56e0\u4e3a\u6211\u4eec\u8bf4\u6b27\u62c9\u7b5b\u7684\u6838\u5fc3\u662f\u8ba9\u6bcf\u4e00\u4e2a\u5408\u6570\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u6570\u7b5b\u53bb\uff0c\u5e94\u8be5\u7528$2$\u53bb\u7b5b\u53bb$12$\u3002 $$\\large{\\color{blue}2\\quad\\color{blue}3\\quad\\color{red}4\\quad5\\quad\\color{red}6\\quad7\\quad\\color{red}8\\quad\\color{red}9\\quad10\\quad11\\quad12\\quad13\\quad14\\quad15\\quad16}$$ $$primes:(2, 3) $$ \u6211\u4eec\u5206\u6790\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570$x$\uff0c\u6211\u4eec\u904d\u5386\u5230\u8d28\u6570\u8868\u4e2d\u7684$p$\u65f6\uff0c\u5982\u679c\u53d1\u73b0$p|x$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5e94\u8be5\u505c\u6b62\u904d\u5386\u6574\u4e2a\u8d28\u6570\u8868\u3002\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\uff1a\u8bbe$x = pr(r \\geq p)$($p$\u4e3a$x$\u7684\u6700\u5c0f\u8d28\u56e0\u6570)\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684$p' &gt; p$\uff0c\u6709$p'x = pp'r = p(p'r)$\uff0c\u5373\u8bf4\u660e$p'x$\u7684\u6700\u5c0f\u8d28\u56e0\u6570\u4e0d\u662f$p'$\uff0c\u4e0d\u5e94\u8be5\u5728\u8fd9\u91cc\u5212\u6389\u3002 \u6309\u7167\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u3002 $$\\large{\\color{blue}2\\quad\\color{blue}3\\quad\\color{red}4\\quad\\color{blue}5\\quad\\color{red}6\\quad\\color{blue}7\\quad\\color{red}8\\quad\\color{red}9\\quad\\color{red}{10}\\quad\\color{blue}{11}\\quad\\color{red}{12}\\quad\\color{blue}{13}\\quad\\color{red}{14}\\quad\\color{red}{15}\\quad\\color{red}{16}}$$ $$primes:(2, 3, 5, 7, 11, 13) $$ \u4ee3\u7801\u5982\u4e0b</p> <pre><code>int cnt = 0;\nbool isprime[MAXN];\nint primes[MAXN];\nvoid solve_plus(int n){\n    for (int i = 2; i &lt;= n; i++){\n        if (!isprime[i])\n            primes[++cnt]  = i;\n        for (int p = 1; p &lt;= cnt; p++){\n            if (p * i &gt; n)\n                break;\n            isprime[p * i] = 1;\n            if (i % p == 0)\n                break;\n        }\n    }\n}\n</code></pre> <p>\u90a3\u4e48\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u4fe1\u606f\u7ade\u8d5b\u4e2d\u6700\u5e38\u7528\u5230\u7684\u4e24\u79cd\u8d28\u6570\u7b5b\u4e86\uff0c\u591a\u591a\u6572\u4ee3\u7801\u66f4\u6709\u52a9\u4e8e\u7406\u89e3\u3002 \u5b8c\u7ed3\u6492\u82b1\u30fe(\u273f\uff9f\u25bd\uff9f)\u30ce</p>"}]}